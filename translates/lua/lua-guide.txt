*lua-guide.txt*                        Nvim

                            NVIM REFERENCE MANUAL

                          Nvim에서 Lua 사용 가이드


                                       목차를 보려면 |gO|를 입력하세요.

==============================================================================
소개                                                                 *lua-guide*


이 가이드는 Neovim에서 Lua를 사용하는 기본 사항을 설명합니다. 사용 가능한 모
든 기능에 대한 포괄적인 백과사전이 아니며 모든 복잡한 사항을 자세히 설명
하지도 않습니다. Neovim에서 Lua를 편안하게 사용하기 위해 알아야 할 최소한
의 생존 키트라고 생각하시면 됩니다.

한 가지 주의해야 할 점은 이 가이드가 Lua 언어 자체에 대한 가이드가 아니라
는 점입니다. 이 가이드는 Lua 언어와 이를 지원하기 위해 제공하는 기능을 통해
Neovim을 구성하고 수정하는 방법에 대한 안내서입니다. Lua 자체에 대해 더 자세히
알고 싶으시다면 |luaref| 및 |lua-concepts|를 참조하세요. 마찬가지로 이
가이드에서는 |user-manual|에서 다루는 Neovim의 기본 사항(명령, 옵션, 매핑, 자동
명령)에 어느 정도 익숙하다고 가정합니다.

------------------------------------------------------------------------------
API에 대한 몇 가지 단어                                          *lua-guide-api*

이 가이드의 목적은 Lua("API")를 통해 Neovim과 상호 작용하는 다양한 방법을
소개하는 것입니다. 이 API는 세 가지 계층으로 구성됩니다.

1. Vim에서 상속된 "Vim API": Vim 스크립트의 |ex-commands|, |builtin-functions|,
|user-function|. 이들은 각각 |vim.cmd()|, |vim.fn|을 통해 액세스할 수
있으며, 아래의 |lua-guide-vimscript|에서 설명합니다.

2. 원격 플러그인 및 GUI에서 사용하기 위해 C로 작성된 "Neovim API"; |api|를 참조
하세요. 이러한 함수는 |vim.api|를 통해 액세스합니다.

3. Lua를 위해 특별히 작성된 "Lua API". 아직 언급되지 않은 `vim.*`를 통
해 액세스할 수 있는 다른 함수; |lua-stdlib|를 참조하십시오.

API 함수는 원래 레이어에서 동작을 상속하므로 이 구분이 중요합니다: 예를 들
어, Lua 자체에서 인수를 생략할 수 있는 경우(이후 'nil'로 전달됨)에도 Neovim API
함수는 항상 모든 인수를 지정해야 하며, Lua 배열이 기본적으로 1-베이스 인덱스를
사용함에도 불구하고 Vim API 함수는 0-베이스 인덱싱을 사용할 수 있습니다.

이를 통해 처음부터 완전히 새로운 API를 작성하지 않고도 가능한 모든 상호 작용을
Lua를 통해 수행할 수 있습니다. 이러한 이유로 기능이나 성능에 큰 이점이 없는 한
일반적으로 함수는 레이어 간에 중복되지 않습니다(예: |nvim_create_autocmd()|를
통해 직접 Lua 함수를 매핑할 수 있지만 |:autocmd|를 통해서는 매핑할 수 없음).
동일한 작업을 수행하는 여러 가지 방법이 있는 경우, 이 가이드에 서는 Lua에서
사용하기 가장 편한 방법만 다룹니다.


==============================================================================
Lua 사용                                                   *lua-guide-using-Lua*

Neovim 명령줄에서 Lua 코드를 실행하려면 |:lua| 명령을 사용하세요.
>vim
    :lua print("Hello!")
<
참고: 각 |:lua| 명령에는 고유한 범위가 있으며 로컬 키워드로 선언된 변수는
명령 외부에서 액세스할 수 없습니다. 다음 코드는 작동하지 않습니다.
>vim
    :lua local foo = 1
    :lua print(foo)
    " "1" 대신 "nil"을 출력합니다.
<
':lua=`(`:lua vim.pretty_print(...)`와 같음)를 사용하여 변수나 테이블의 값을
 편리하게 확인할 수도 있습니다.
>lua
    :lua=package
<
외부 파일의 Lua 스크립트를 실행하려면 Vimscript 파일과 마찬가지로 |:source|
명령을 사용하면 됩니다.
>vim
    :source ~/programs/baz/myluafile.lua
<
마지막으로, Lua 코드를 |lua-heredoc| 블록 안에 넣어 Vimscript 파일에 직접
삽입할 수 있습니다.
>vim
    lua << EOF
      local tbl = {1, 2, 3}
      for k, v in ipairs(tbl) do
        print(v)
      end
    EOF
<
------------------------------------------------------------------------------
시작 시 Lua 파일 사용                                         *lua-guide-config*

Neovim은 `init.vim` 또는 `init.lua`를 구성 파일로 사용할 수 있지만, 두 파일을
동시에 사용할 수는 없습니다. 이 파일은 일반적으로 Linux, BSD, macOS의 경우
`~/.config/nvim`, Windows의 경우 `~/AppData/Local/nvim/`인 |config| 디렉터리에
위치해야 합니다. `init.vim`에서 Lua를, `init.lua`에서 Vimscript를 사용할 수
있다는 점에 유의하세요. 이에 대한 내용은 아래에서 다룹니다.

다른 Lua 스크립트를 |startup| 에서 자동으로 실행하고 싶다면, |'runtimepath'|의
'plugin/'에 넣으면 됩니다.

------------------------------------------------------------------------------
Lua 모듈                                                     *lua-guide-modules*

필요에 따라 Lua 파일을 로드하려면 |'runtimepath'|의 `lua/` 디렉터리에 파
일을 배치하고 `require`를 사용하여 로드할 수 있습니다. (이는 Vimscript의
|autoload| 메커니즘에 해당하는 Lua 기능입니다.)

다음과 같은 디렉토리 구조가 있다고 가정해 보겠습니다.
 
    ~/.config/nvim
    |-- after/
    |-- ftplugin/
    |-- lua/
    |  |-- myluamodule.lua
    |  |-- other_modules/
    |     |-- anothermodule.lua
    |     |-- init.lua
    |-- plugin/
    |-- syntax/
    |-- init.vim
 

그러면 다음 Lua 코드가 `myluamodule.lua`를 로드합니다.
>lua
    require("myluamodule")
<
'.lua' 확장자가 없다는 점에 유의하세요.

마찬가지로 `other_modules/anothermodule.lua` 로드는 다음을 통해 수행됩니다.
>lua
    require('other_modules/anothermodule')
    -- or
    require('other_modules.anothermodule')
<

"submodules"은 하위 디렉터리일 뿐이며, '.`는 경로 구분 기호 `/`와 동일합니다
(Windows에서도 마찬가지).

파일 이름을 지정하지 않고도 |init.lua| 파일이 포함된 폴더를 직접 require할
수 있습니다.
>lua
    require('other_modules') -- loads other_modules/init.lua
<
존재하지 않는 모듈이나 구문 오류가 포함된 모듈을 요구하면 현재 실행 중인 스크
립트가 중단됩니다. 이러한 오류를 포착하기 위해 `pcall()`을 사용할 수 있습니다.
다음 예제는 `module_with_error`를 로드하려고 시도한 후 성공하면 해당 함수 중
하나를 호출하고 그렇지 않으면 오류 메시지를 출력합니다.
>lua
    local ok, mymod = pcall(require, 'module_with_error')
    if not ok then
      print("Module had an error")
    else
      mymod.function()
    end
<
|:source|와 달리, |require()|는 |'runtimepath'| 아래의 모든 `lua/` 디렉터리를
검색할 뿐 만 아니라 처음 사용할 때 모듈을 캐시합니다. 따라서 `require()`를 두
번 호출하면 스크립트가 다시 실행되지 않고 캐시된 파일을 반환합니다. 파일을
다시 실행하려면 먼저 캐시에서 파일을 수동으로 제거해야 합니다.

>lua
    package.loaded['myluamodule'] = nil
    require('myluamodule')    -- 디스크에서 모듈을 다시 읽고 실행합니다.
<
------------------------------------------------------------------------------
더 보기:
• |lua-require|
• |luaref-pcall()|

==============================================================================
Lua에서 Vim 명령 및 함수 사용                              *lua-guide-vimscript*

모든 Vim 명령과 함수는 Lua에서 액세스할 수 있습니다.

------------------------------------------------------------------------------
Vim 명령어                                              *lua-guide-vim-commands*

Lua에서 임의의 Vim 명령을 실행하려면 해당 명령을 문자열로 |vim.cmd()|에
전달하면 됩니다.
>lua
    vim.cmd("colorscheme habamax")
<
특수 문자는 백슬래시를 사용하여 이스케이프 처리해야 한다는 점에 유의하세요.
>lua
    vim.cmd("%s/\\Vfoo/bar/g")
<
다른 방법은 다음과 같이 대괄호 `[[ ]]`로 구분된 리터럴 문자열(|luaref-literal|
참조)을 사용하는 것입니다.
>lua
    vim.cmd([[%s/\Vfoo/bar/g]])
<
리터럴 문자열을 사용할 때의 또 다른 이점은 여러 줄로 구성할 수 있다는 것입니
다. 따라서 |vim.cmd()|를 한 번 호출할 때 여러 명령을 전달할 수 있습니다.
>lua
    vim.cmd([[
      highlight Error guibg=red
      highlight link Warning Error
    ]])
<
이는 |lua-heredoc|의 반대 개념으로, `init.lua`에 Vimscript 코드를 포함할 수 있습
니다.

프로그래밍 방식으로 Vim 명령을 작성하려면 다음 양식이 유용할 수 있습니다(위의
해당 줄과 모두 동일).
>lua
    vim.cmd.colorscheme("habamax")
    vim.cmd.highlight({ "Error", "guibg=red" })
    vim.cmd.highlight({ "link", "Warning", "Error" })
<
------------------------------------------------------------------------------
Vimscript 함수                                         *lua-guide-vim-functions*

Lua에서 Vimscript 함수를 호출하려면 |vim.fn|을 사용합니다. Lua와 Vimscript 간의
데이터 타입은 자동으로 변환됩니다:
>lua
    print(vim.fn.printf('Hello from %s', 'Lua'))

    local reversed_list = vim.fn.reverse({ 'a', 'b', 'c' })
    print(vim.inspect(reversed_list)) -- { "c", "b", "a" }

    local function print_stdout(chan_id, data, name)
      print(data[1])
    end

    vim.fn.jobstart('ls', { on_stdout = print_stdout })
    print(vim.fn.printf('Hello from %s', 'Lua'))
<
이는 |builtin-functions|, |user-function| 둘 다 작동합니다.

해시(`#`)는 Lua에서 식별자로 유효한 문자가 아니므로, 예를 들어 |autoload| 같은
함수는 이 구문으로 호출해야 합니다.
>lua
    vim.fn['my#autoload#function']()
<
------------------------------------------------------------------------------
더 보기:
• |builtin-functions|: 모든 Vimscript 함수의 알파벳순 목록
• |function-list|:     주제별로 그룹화된 모든 Vimscript 함수 목록
• |:runtime|:          |'runtimepath'|의 패턴과 일치하는 모든 Lua 스크립트를 실행합니다.
• |package.path|:      `require()`로 검색된 모든 경로 목록

==============================================================================
변수                                                       *lua-guide-variables*

변수는 다음 래퍼를 사용하여 설정하고 읽을 수 있으며, 이는 |variable-scope|와
직접 적으로 일치합니다.

• |vim.g|:   전역 변수(|g:|)
• |vim.b|:   현재 버퍼에 대한 변수(|b:|)
• |vim.w|:   현재 창에 대한 변수(|w:|)
• |vim.t|:   현재 탭 페이지에 대한 변수(|t:|)
• |vim.v|:   미리 정의된 Vim 변수(|v:|)
• |vim.env|: 에디터 세션에서 정의된 환경 변수

데이터 유형은 자동으로 변환됩니다. 예를 들어
>lua
    vim.g.some_global_variable = {
      key1 = "value",
      key2 = 300
    }

    print(vim.inspect(vim.g.some_global_variable))
    --> { key1 = "value", key2 = 300 }
<
래퍼를 인덱싱하여 특정 버퍼(번호로), 창(|window-ID|로) 또는 탭 페이지를 타
겟팅할 수 있습니다.
>lua
    vim.b[2].myvar = 1               -- 버퍼 번호 2에 대한 myvar 설정 
    vim.w[1005].myothervar = true    -- 창 ID 1005에 대한 myothervar 설정
<
일부 변수 이름에는 Lua에서 식별자로 사용할 수 없는 문자가 포함될 수 있습니다.
그래도 다음 구문을 사용하여 이러한 변수를 조작할 수 있습니다.
>lua
    vim.g['my#variable'] = 1
<
배열 변수의 필드를 직접 변경할 수 없다는 점에 유의하세요. 이 방법은 작동하
지 않습니다.
>lua
    vim.g.some_global_variable.key2 = 400
    vim.pretty_print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 300 }
<
대신 중간 Lua 테이블을 생성하고 이를 변경해야 합니다.
>lua
    local temp_table = vim.g.some_global_variable
    temp_table = keys = 400
    vim.g.some_global_variable = temp_table
    vim.pretty_print(vim.g.some_global_variable)
    --> { key1 = "value", key2 = 400 }
<
변수를 삭제하려면 'nil'로 설정하면 됩니다.
>lua
    vim.g.myvar = nil
<
------------------------------------------------------------------------------
더 보기:
• |lua-vim-variables|

==============================================================================
옵션                                                         *lua-guide-options*

Lua를 통해 |options|을 설정하는 두 가지 보완적인 방법이 있습니다.

------------------------------------------------------------------------------
vim.opt

예를 들어 `init.lua`에서 전역 및 로컬 옵션을 설정하는 가장 편리한 방법은
`vim.opt` 와 친구를 사용하는 것입니다.

• |vim.opt|:        |:set| 처럼 동작
• |vim.opt_global|: |:setglobal| 처럼 동작
• |vim.opt_local|:  |:setlocal| 처럼 동작

예를 들어, 다음과 같은 Vimscript 명령이 있다면,
>vim
    set smarttab
    set nosmarttab
<
다음과 같습니다.
>lua
    vim.opt.smarttab = true
    vim.opt.smarttab = false
<
특히 Lua 테이블을 통해 목록형, 맵형, 집합형 옵션으로 쉽게 작업할 수 있습니다.
>vim
    set wildignore=*.o,*.a,__pycache__
    set listchars=space:_,tab:> 
    set formatoptions=njt
<
대신 다음을 사용할 수 있습니다.
>lua
    vim.opt.wildignore = { '*.o', '*.a', '__pycache__' }
    vim.opt.listchars = { space = '_', tab = '>~' }
    vim.opt.formatoptions = { n = true, j = true, t = true }
<
이러한 래퍼에는 Vimscript에서 |:set =|, |:set^=| 및 |:set-=|와 유사하게 작
동하는 메서드도 함께 제공됩니다.
>lua
    vim.opt.shortmess:append({ I = true })
    vim.opt.wildignore:prepend('*.o')
    vim.opt.whichwrap:remove({ 'b', 's' })
<
대신 옵션 값에 직접 액세스할 수 없고 |vim.opt:get()|을 사용해야 한다는 제약이
생깁니다.
>lua
    print(vim.opt.smarttab)
    --> {...} (big table)
    print(vim.opt.smarttab:get())
    --> false
    vim.pretty_print(vim.opt.listchars:get())
    --> { space = '_', tab = '>~' }
<
------------------------------------------------------------------------------
vim.o

따라서 `:echo &number`, `:let &listchars='space:_,tab:>~'`를 통해 옵션을
가져오고 설정하는 방법과 유사하게 `vim.o`와 친구를 사용하여 보다 직접적인
변수와 같은 접근 방식이 있습니다.

• |vim.o|:  |:set| 처럼 동작
• |vim.go|: |:setglobal| 처럼 동작
• |vim.bo|: 버퍼 스코프 옵션
• |vim.wo|: 윈도우 스코프 옵션

예시:
>lua
    vim.o.smarttab = false -- :set nosmarttab
    print(vim.o.smarttab)
    --> false
    vim.o.listchars = 'space:_,tab:>~' -- :set listchars='space:_,tab:>~'
    print(vim.o.listchars)
    --> 'space:_,tab:>~'
    vim.o.isfname = vim.o.isfname .. ',@-@' -- :set isfname+=@-@
    print(vim.o.isfname)
    --> '@,48-57,/,.,-,_,+,,,#,$,%,~,=,@-@'
    vim.bo.shiftwidth = 4 -- :setlocal shiftwidth=4
    print(vim.bo.shiftwidth)
    --> 4
<
변수와 마찬가지로 버퍼 및 창 옵션에 각각 버퍼 번호 또는 |window-ID|를 지정할
수 있습니다. 숫자를 지정하지 않으면 현재 버퍼 또는 창이 사용됩니다.
>lua
    vim.bo[4].expandtab = true -- sets expandtab to true in buffer 4
    vim.wo.number = true       -- sets number to true in current window
    print(vim.wo[0].number)    --> true
<
------------------------------------------------------------------------------
더 보기:
• |lua-options|

==============================================================================
매핑                                                        *lua-guide-mappings*

Vim 명령 또는 Lua 함수를 키 시퀀스에 매핑할 수 있습니다.

------------------------------------------------------------------------------
매핑 생성                                               *lua-guide-mappings-set*

매핑은 |vim.keymap.set()|를 사용하여 만들 수 있습니다. 이 함수에는 세 가지 
필수 인수가 필요합니다.

• {mode}는 매핑이 적용될 모드 접두사가 포함된 문자열 또는 문자 열 테이블입니다.
  |:map!|의 경우 접두사는 |:map-modes|에 나열된 접두사, "!", |:map|의 경우 빈 문자열
  입니다.
• {lhs}는 매핑을 트리거해야 하는 키 시퀀스가 포함된 문자열입니다. 빈 문자열
  은 키를 비활성화하는 |<Nop>|와 동일합니다.
• {rhs}는 Vim 명령이 포함된 문자열이거나 {lhs}가 입력될 때 실행되어야 하는 Lua
  함수입니다.

예시:
>lua
    -- Vim 명령에 대한 일반 모드 매핑
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- Vim 명령에 대한 일반 및 명령줄 모드 매핑
    vim.keymap.set({'n', 'c'}, '<Leader>ex2', '<cmd>echo "Example 2"<cr>')
    -- Lua 함수에 대한 일반 모드 매핑
    vim.keymap.set('n', '<Leader>ex3', vim.treesitter.start)
    -- 인수가 있는 Lua 함수에 대한 일반 모드 매핑
    vim.keymap.set('n', '<Leader>ex4', function() print('Example 4') end)
<
다음을 통해 Lua 모듈의 함수를 매핑할 수 있습니다.
>lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action)
<
이렇게 하면 매핑이 정의된 시점에 플러그인이 로드되는 것에 주의하세요. 매핑이
실행되는 시간으로 로딩을 연기하려면 (|autoload| 함수의 경우) `function() end`로
감싸면 됩니다.
>lua
    vim.keymap.set('n', '<Leader>pl2', function() require('plugin').action() end)
<
네 번째 선택적 인수는 |:map-arguments|의 키와 같이 매핑의 동작을 수정하는 키
가 있는 테이블입니다. 다음은 가장 유용한 옵션입니다:
• `buffer`: 지정된 숫자로만 버퍼에 대한 매핑을 설정합니다; `0` 또는 `true`는 현재
  버퍼를 의미합니다. >lua
    -- 현재 버퍼에 대한 매핑 설정
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = true })
    -- 버퍼 번호 4에 대한 매핑 설정
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { buffer = 4 })
<
• `silent`: `true`로 설정하면 오류 메시지와 같은 출력을 억제합니다. >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action, { silent = true })
<
• `expr`: `true`로 설정하면 {rhs}를 실행하지 않고 반환값을 입력으로 사용합니다.
  특수 |keycodes|는 자동으로 변환됩니다. 예를 들어, 다음 매핑은 팝업 메뉴에서만
  <down> 을 <c-n>으로 바꿉니다. >lua
    vim.keymap.set('c', '<down>', function()
      if vim.fn.pumvisible() == 1 then return '<c-n>' end
      return '<down>'
    end, { expr = true })
<
• `desc`: 매핑을 나열할 때 표시되는 문자열(예: |:map|)입니다. 이 문자열은
  {rhs}와 같은 Lua 함수가 다음 포멧으로만 나열되기 때문에 유용합니다.
  `Lua: <number> <source file>:<line>`
  따라서 플러그인은 생성하는 매핑에 항상 이 값을 사용해야 합니다. >lua
    vim.keymap.set('n', '<Leader>pl1', require('plugin').action,
      { desc = 'Execute action from plugin' })
<
• `remap`: 기본적으로 모든 매핑은 기본적으로 비재귀적입니다(즉,
  |vim.keymap.set()|는 |:noremap|처럼 동작합니다). {rhs} 자체가 실행되어야 하는
  매핑인 경우 `remap = true`를 설정합니다. >lua
    vim.keymap.set('n', '<Leader>ex1', '<cmd>echo "Example 1"<cr>')
    -- 더 짧은 매핑 추가
    vim.keymap.set('n', 'e', '<Leader>ex1', { remap = true })
<
  참고: |<Plug>| 매핑은 기본값인 `remap = false`를 사용해도 항상 확장됩니다: >lua
    vim.keymap.set('n', '[%', '<Plug>(MatchitNormalMultiBackward)')
<
------------------------------------------------------------------------------
매핑 제거                                               *lua-guide-mappings-del*

특정 매핑은 |vim.keymap.del()|로 제거할 수 있습니다.
>lua
    vim.keymap.del('n', '<Leader>ex1')
    vim.keymap.del({'n', 'c'}, '<Leader>ex2', {buffer = true})
<
------------------------------------------------------------------------------
더 보기:
• `vim.api.`|nvim_get_keymap()|:     모든 전역 매핑 반환
• `vim.api.`|nvim_buf_get_keymap()|: 버퍼에 대한 모든 매핑 반환

==============================================================================
자동 명령                                               *lua-guide-autocommands*

자동 명령은 파일을 읽거나 쓸 때, 창이 생성될 때 등 하나 이상의 |events|가
트리거될 때마다 자동으로 실행되는 Vim 명령 또는 Lua 함수입니다. 이러한 함
수는 Neovim API를 통해 Lua에서 액세스할 수 있습니다.

------------------------------------------------------------------------------
자동 명령 생성하기                                *lua-guide-autocommand-create*

자동 명령은 두 개의 필수 인수를 받는 `vim.api.`|nvim_create_autocmd()|를 사용하여
생성됩니다.
• {event}: 명령 또는 함수를 트리거해야 하는 이벤트가 포함된 문자열 또는 문자열
           테이블입니다.
• {opts}:  이벤트가 트리거될 때 어떤 일이 일어날지 제어하는 키가 있는
           테이블입니다.

가장 중요한 옵션은 다음과 같습니다.

• `pattern`:  자동 명령 패턴이 포함된 문자열 또는 문자열 테이블. 참고: `$HOME`,
            `~`와 같은 환경 변수는 자동으로 확장되지 않으므로
            `vim.fn.`|expand()|를 명시적으로 사용해야 합니다.
• `command`:  Vim 명령이 포함된 문자열입니다.
• `callback`: Lua 함수.

`command`, `callback` 중 하나만 반드시 지정해야 합니다. `pattern`을 생략하면
기본값은 `pattern = '*'`입니다.
예제:

>lua
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      command = "echo 'Entering a C or C++ file'",
    })

    -- Lua 함수를 사용하여 동일한 자동 명령 작성
    vim.api.nvim_create_autocmd({"BufEnter", "BufWinEnter"}, {
      pattern = {"*.c", "*.h"},
      callback = function() print("Entering a C or C++ file") end,
    })

    -- MyPlugin에 의해 트리거된 사용자 이벤트
    vim.api.nvim_create_autocmd("User", {
      pattern = "MyPlugin",
      callback = function() print("My Plugin Works!") end,
    })
<

Neovim은 항상 트리거된 자동 명령에 대한 정보가 포함된 단일 테이블로 Lua 함수를
호출합니다. 가장 유용한 키는 다음과 같습니다.
• `match`: `pattern`과 일치하는 문자열 (|<amatch>| 참조)
• `buf`:   이벤트가 트리거된 버퍼의 번호 (|<abuf>| 참조)
• `file`:  이벤트가 트리거된 버퍼의 파일 이름 (|<afile>| 참조)
• `data`:  일부 이벤트에 대해 전달되는 기타 관련 데이터가 포함된 테이블

예를 들어 일부 파일 유형에 대해 버퍼-로컬 매핑을 이렇게 설정할 수 있습니다.
>lua
    vim.api.nvim.create_autocmd("FileType", {
      pattern = "lua",
      callback = function(args)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, { buffer = args.buf })
      end
    })
<
즉, 콜백 자체가 (선택적) 인수를 받는 경우 오류를 피하기 위해 `function() end`
로 인수를 감싸야 합니다.
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.highlight.on_yank() end
    })
<
(Lua 함수 정의에서 사용하지 않는 인수는 생략할 수 있으므로 이는
`function(args) ... end`와 동일합니다.)

패턴을 사용하는 대신 `buffer`를 사용하여 버퍼-로컬 자동 명령(
|autocmd-buflocal| 참조)을 만들 수 있습니다(이 경우 `pattern`은 사용할 수 없음).
>lua
    -- 현재 버퍼에 대한 자동 명령 설정
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 0,
      callback = function() print("hold") end,
    })

    -- 버퍼 번호 33에 대한 자동 명령 설정
    vim.api.nvim_create_autocmd("CursorHold", {
      buffer = 33,
      callback = function() print("hold") end,
    })
<
매핑과 마찬가지로 `desc`를 사용하여 설명을 추가할 수 있으며, 추가해야 합니다.
>lua
    vim.api.nvim_create_autocmd('TextYankPost', {
      callback = function() vim.highlight.on_yank() end,
      desc = "Briefly highlight yanked text"
    })
<
마지막으로 `group` 키를 사용하여 자동 명령을 그룹화할 수 있으며, 이에 대
해서는 다음 섹션에서 자세히 설명합니다.

------------------------------------------------------------------------------
자동 명령 그룹화                                  *lua-guide-autocommands-group*

자동 명령 그룹을 사용하여 관련 자동 명령을 함께 그룹화할 수 있습니다(
|autocmd-groups| 참조). 이 기능은 자동 명령을 정리하는 데 유용하며 특히 자동 명
령이 여러 번 설정되는 것을 방지하는 데 유용합니다.

그룹은 `vim.api.`|nvim_create_augroup()|로 만들 수 있습니다. 이 함수는 두 가지
필수 인수를 받습니다. 그룹 이름이 포함된 문자열과 그룹이 이미 존재하는 경우
그룹을 지워야 하는지(즉, 그룹화된 모든 자동 명령을 제거해야 하는지)를 결정하는
테이블입니다. 이 함수는 그룹의 내부 식별자인 숫자를 반환합니다. 그룹은 이
식별자 또는 이름으로 지정할 수 있습니다(단, 그룹이 먼저 생성된 경우에만 가능).

예를 들어, 다시 로드할 수 있는 파일에 정의된 자동 명령에 대한 일반적인
Vimscript 패턴은 다음과 같습니다.
>vim
    augroup vimrc
      " 모든 vimrc 자동 명령 제거
      autocmd!
      au BufNewFile,BufRead *.html set shiftwidth=4
      au BufNewFile,BufRead *.html set expandtab
    augroup END
<
이는 다음 Lua 코드와 동일합니다.
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = true })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = mygroup,
      cmd = 'set shiftwidth=4',
    })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = 'vimrc',  -- group = mygroup,과 동일합니다.
      cmd = 'set expandtab',
    })
<
자동 명령 그룹은 주어진 이름에 대해 고유하므로 다른 파일 등에서 재사용할 수
있습니다.
>lua
    local mygroup = vim.api.nvim_create_augroup('vimrc', { clear = false })
    vim.api.nvim_create_autocmd( {'BufNewFile', 'BufRead' }, {
      pattern = '*.html',
      group = mygroup,
      cmd = 'set shiftwidth=4',
    })
<
------------------------------------------------------------------------------
자동 명령어 삭제하기                             *lua-guide-autocommands-delete*

`vim.api.`|nvim_clear_autocmds()|를 사용하여 자동 명령을 제거할 수 있습니다.
이 함수는 제거할 자동 명령을 설명하는 키 테이블인 단일 필수 인수를 받습니다.
>lua
    -- 모든 BufEnter, InsertLeave 자동 명령 삭제
    vim.api.nvim_clear_autocmds({event = {"BufEnter", "InsertLeave"}})

    -- "*.py" pattern을 사용하는 모든 자동 명령을 삭제합니다.
    vim.api.nvim_clear_autocmds({pattern = "*.py"})

    -- "scala" 그룹에서 모든 자동 명령 삭제
    vim.api.nvim_clear_autocmds({group = "scala"})

    -- 현재 버퍼에 있는 모든 ColorScheme 자동 명령을 삭제합니다.
    vim.api.nvim_clear_autocmds({event = "ColorScheme", buffer = 0 })
<
참고: 그룹 내 자동 명령은 다른 옵션이 일치하더라도 `group` 키가 지정된
경우에만 제거됩니다.

------------------------------------------------------------------------------
더 보기
• |nvim_get_autocmds()|:  일치하는 모든 자동 명령 반환
• |nvim_exec_autocmds()|: 일치하는 모든 자동 명령 실행

==============================================================================
사용자 명령                                             *lua-guide-usercommands*

|user-commands|은 Vimscript 또는 Lua 함수를 호출하는 사용자 지정 Vim 명령입니다.
기본 제공 명령과 마찬가지로 인수를 가질 수 있고, 범위에서 작동하거나, 인수를
사용자 정의로 완성할 수 있습니다. 플러그인에 가장 유용하므로 이 고급 주제에
서는 기본적인 내용만 다루겠습니다.

------------------------------------------------------------------------------
사용자 명령 만들기                               *lua-guide-usercommands-create*

사용자 명령은 `vim.api.`|nvim_create_user_command()|를 사용하여 Neovim API를
통해 생성할 수 있습니다. 이 함수는 세 가지 필수 인수 를 받습니다.
• 명령의 이름인 문자열(기본 제공 명령과 구분하기 위해 대문자로 시작해야 함)
• Vim 명령이 포함된 문자열 또는 명령이 호출될 때 실행되는 Lua 함수
• |command-attributes|이 있는 테이블, `desc` (명령을 설명하는 문자열), `force`(이미
  존재하는 명령이 같은 이름으로 대체되지 않도록 `false`로 설정), `preview`(
  |:command-preview|에 사용되는 Lua 함수) 키가 포함될 수 있습니다.

예시:
>lua
    vim.api.nvim_create_user_command('Test', 'echo "It works!"', {})
    vim.cmd.Test()
    --> It works!
<
(세 번째 인수는 속성을 지정하지 않더라도 필수입니다.)

Lua 함수는 인수와 수정자가 포함된 단일 테이블 인수를 사용하여 호출됩니다. 가장
중요한 것은 다음과 같습니다.
• `name`: 명령 이름이 포함된 문자열
• `fargs`: 공백으로 분할된 명령 인수가 포함된 테이블 (|<f-args>| 참조)
• `bang`: `!`수정자와 함께 명령이 실행된 경우 `true` (|<bang>| 참조)
• `line1`: 명령 범위의 시작 줄 번호 (|<line1>| 참조)
• `line2`: 명령 범위의 마지막 줄 번호 (|<line2>| 참조)
• `range`: 명령 범위의 항목 수입니다: 0, 1, 2 (|<range>| 참조)
• `count`: 제공된 모든 카운트 (|<count>| 참조)
• `smods`: 명령 수정자가 포함된 테이블 (|<mods>| 참조)

예시:
>lua
    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })

    vim.cmd.Upper('foo')
    --> FOO
<
'complete' 속성은 |:command-complete|에 나열된 속성 외에도 Lua 함수
를 사용할 수 있습니다. >lua

    vim.api.nvim_create_user_command('Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1,
        complete = function(ArgLead, CmdLine, CursorPos)
          -- 완료 후보를 목록과 같은 테이블로 반환합니다
          return { "foo", "bar", "baz" }
        end,
    })
<
버퍼-로컬 사용자 명령은 `vim.api.`|nvim_buf_create_user_command()|로 만들어집니다.
여기서 첫 번째 인수는 버퍼 번호 (`0`은 현재 버퍼)이며, 나머지 인수는
|nvim_create_user_command()|의 경우와 동일합니다.
>lua
    vim.api.nvim_buf_create_user_command(0, 'Upper',
      function(opts)
        print(string.upper(opts.fargs[1]))
      end,
      { nargs = 1 })
<
------------------------------------------------------------------------------
사용자 명령 삭제하기                             *lua-guide-usercommands-delete*

사용자 명령은 `vim.api.`|nvim_del_user_command()|로 삭제할 수 있습니다. 유일한
인수는 명령의 이름입니다.
>lua
    vim.api.nvim_del_user_command('Upper')
<
버퍼-로컬 사용자 명령을 삭제하려면 `vim.api.`|nvim_buf_del_user_command()|를 사용
합니다. 여기서 첫 번째 인수는 버퍼 번호 (`0`은 현재 버퍼)이고, 두 번째 인수는
명령 이름입니다.
>lua
    vim.api.nvim_buf_del_user_command(4, 'Upper')
<
==============================================================================
Credits                                                      *lua-guide-credits*
This guide is in large part taken from nanotee's Lua guide:
https://github.com/nanotee/nvim-lua-guide

Thank you @nanotee!

vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
