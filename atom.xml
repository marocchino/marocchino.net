<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A study note</title>
  
  
  <link href="http://marocchino.net/atom.xml" rel="self"/>
  
  <link href="http://marocchino.net/"/>
  <updated>2021-01-11T23:08:13.026Z</updated>
  <id>http://marocchino.net/</id>
  
  <author>
    <name>marocchino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>id를 사용하는 컬럼을 저장하려면</title>
    <link href="http://marocchino.net/2017/08/26/to-save-a-column-using-id/"/>
    <id>http://marocchino.net/2017/08/26/to-save-a-column-using-id/</id>
    <published>2017-08-26T08:54:15.000Z</published>
    <updated>2021-01-11T23:08:13.026Z</updated>
    
    <content type="html"><![CDATA[<p>에초에 이런 모델이있었다.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>url에 아이디 대신 상품 코드를 표시하고 싶다는 요구사항이 추가 되었다.뭐 이정도야 껌이지.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">find_by_code</span><span class="params">(code)</span></span></span><br><span class="line">    find(code.sub(<span class="regexp">/\AC0+/</span>, <span class="string">''</span>))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">code</span></span></span><br><span class="line">    <span class="string">"C<span class="subst">#&#123;id.to_s.rjust(<span class="number">7</span>, <span class="string">'0'</span>)&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>코드를 커스터마이징 하고싶다는 요구사항이 추가되었다.DB에 저장해야하는데 <code>before_create</code> 시점에서는 모델의 아이디를 뽑을 수 없다.저장을 두번 하는게 신경쓰이긴하지만 어쩔수 없지 <code>after_save</code> 인가.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">  after_create <span class="symbol">:generate_code</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_code</span></span></span><br><span class="line">    <span class="keyword">self</span>.code <span class="params">||</span>= <span class="string">"C<span class="subst">#&#123;id.to_s.rjust(<span class="number">7</span>, <span class="string">'0'</span>)&#125;</span>"</span></span><br><span class="line">    throw(<span class="symbol">:abort</span>) <span class="keyword">unless</span> save</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>테스트를 돌려보면 워닝이 대량 발생한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEPRECATION WARNING: The behavior of attribute_changed? inside of after...</span><br><span class="line">.DEPRECATION WARNING: The behavior of attribute_changed? inside of after...</span><br><span class="line">.DEPRECATION WARNING: The behavior of attribute_changed? inside of after...</span><br><span class="line">.DEPRECATION WARNING: The behavior of attribute_changed? inside of after...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>으으.. 이건 <code>save</code>안에서 업데이트할 컬럼을 찾기위해 <code>attribute_changed?</code>를부르기 때문이다.  성능에도 안좋고 좀 진지하게 검색해서 <code>before_create</code>로 옮기는대신 아이디를 직접뽑는 방향으로 전환.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">  before_create <span class="symbol">:generate_id_and_code</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate_id_and_code</span></span></span><br><span class="line">    <span class="keyword">self</span>.id <span class="params">||</span>=</span><br><span class="line">      <span class="keyword">self</span><span class="class">.<span class="keyword">class</span>.<span class="title">connection</span></span></span><br><span class="line">      .select_value(<span class="string">"select nextval('<span class="subst">#&#123;<span class="keyword">self</span><span class="class">.<span class="keyword">class</span>.<span class="title">sequence_name</span>&#125;')")</span></span></span></span><br><span class="line"><span class="string"><span class="subst">    <span class="keyword">self</span>.code = <span class="string">"C<span class="subst">#&#123;id.to_s.rjust(<span class="number">7</span>, <span class="string">'0'</span>)&#125;</span>"</span> <span class="keyword">unless</span> code?</span></span></span><br><span class="line"><span class="string"><span class="subst">  <span class="keyword">end</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="keyword">end</span></span></span></span><br></pre></td></tr></table></figure><p>이제 저장도 한번하고 테스트돌려도 워닝안나온다.만족</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;에초에 이런 모델이있었다.&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    
    <category term="ruby" scheme="http://marocchino.net/tags/ruby/"/>
    
    <category term="rails" scheme="http://marocchino.net/tags/rails/"/>
    
  </entry>
  
  <entry>
    <title>설계와 테스트</title>
    <link href="http://marocchino.net/2017/01/20/tips-for-test/"/>
    <id>http://marocchino.net/2017/01/20/tips-for-test/</id>
    <published>2017-01-19T20:23:33.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="도입"><a href="#도입" class="headerlink" title="도입"></a>도입</h1><p>tl;dr red - green - refactor</p><p>어디 보낼글 아니니 반말로 써야지.</p><p>테스트 안하는 사람들의 논리는 몇가지 패턴이 있다.</p><ul><li>바빠서 못해요.</li><li>나는 테스트에 가치를 발견하지 못하겠다.</li><li>테스트할 만한 가치가 없는 부분이에요.</li><li>변경이 너무 잦아서 의미가 없어요.</li></ul><p>위에 있는 경우는 뭐 설득당할 생각이 없거나 여유가 없는거라 어쩔 수 없는데 오늘설득 가능할 것 같은 새 패턴을 발견해서 여기에 대한 이야기를 해볼까한다.</p><ul><li>테스트하려고 설계를 망치긴 싫어요.</li></ul><p>읭??</p><h1 id="좋은-설계는-죽은-설계뿐이다"><a href="#좋은-설계는-죽은-설계뿐이다" class="headerlink" title="좋은 설계는 죽은 설계뿐이다"></a>좋은 설계는 죽은 설계뿐이다</h1><p>테스트충으로써 tdd를 하면 많은 메서드와 비대한 객체로 끌려가는 건 안다. 다만그걸 리펙터링할 타이밍을 못잡는 상황이 문제인거지 이게 tdd의 문제라 생각하지는않는다. 오히려 중요한 부분인데 설계 문제로 테스트를 못한다면 난 설계에 대해다시 고민하지 테스트를 줄여서 좋은 설계를 만들자는 주장은 안할 것 같다.</p><h1 id="좋은-테스트가-좋은-설계를-보장하지-않지만-모든-좋은-설계는-좋은-테스트를-가지고-있다"><a href="#좋은-테스트가-좋은-설계를-보장하지-않지만-모든-좋은-설계는-좋은-테스트를-가지고-있다" class="headerlink" title="좋은 테스트가 좋은 설계를 보장하지 않지만 모든 좋은 설계는 좋은 테스트를 가지고 있다"></a>좋은 테스트가 좋은 설계를 보장하지 않지만 모든 좋은 설계는 좋은 테스트를 가지고 있다</h1><p>가령 지금 테스트를 줄여 이쁘게 코드가 나왔다고 해도 코드는 고정된 자산이 아니다.많약 그런식으로 고정할 수 있는 코드라면 그냥 한번 잘짜면 되지 에초에 테스트도필요없다.</p><h1 id="그래서-테스트-팁"><a href="#그래서-테스트-팁" class="headerlink" title="그래서 테스트 팁"></a>그래서 테스트 팁</h1><p>뭐든 많이해보고 익숙해 지는 게 최고다. 굳 올드 red-green-refactor만큼 좋은 bp를본적이 없으니 그거 그냥 하자능.</p><h2 id="1-red"><a href="#1-red" class="headerlink" title="1. red"></a>1. red</h2><p>아는 범위에서 최대한 신중하게 최소 스팩을 정한다. 설계를 꼼꼼히 하고 싶다면 이단계에서 해라. 단위 테스트를 먼저하느라 설계가 이상해진다면 통합 스팩을 먼저작성해라. bdd를 한다면 문장을 만들어서 기획자한테 내가 이해한게 니가 기획한거랑일치한지 확인하는게 좋다. 근데 생각해보면 기획자의 경험이나 이해도는 내가 어떻게할 수 있는 게 아니긴하다.</p><h2 id="2-green"><a href="#2-green" class="headerlink" title="2. green"></a>2. green</h2><p>아는 범위에서 최대한 구현한다. 모르는 건 어쩔 수 없다.</p><h2 id="3-refactor"><a href="#3-refactor" class="headerlink" title="3. refactor"></a>3. refactor</h2><p>모든 코드가 적절한지 고민하고 필요없는 부분은 늦기전에 지운다. 딱히 정답이 있는부분도 아니고 경험이 잘 설명될 수 있는 부분도 아니고 이게 젤 힘들다.이게 잘 안되서 설계가 어쩌느니 테스트가 어쩌느니 궁시렁 되는데 나한테 권한이있고 이유를 설명할 수 있다면 모든 코드는 수정 가능하다는 마인드 셋이 가장중요하고 그 다음은 대량의 코드 수정을 어느정도의 효율로 할 수 있는가 정도아닐까. 대부분 리뷰에서 수정사항 대량으로 나오면 힘들어하는게 저쪽이라..</p><h1 id="그밖에"><a href="#그밖에" class="headerlink" title="그밖에"></a>그밖에</h1><ul><li>OOP 한정이지만 프라이빗은 테스트하는 거 아님.프라이빗이 테스트하고 싶어진다면, 객체를 나눌때가 된게 아닌가 고민해 보라능.</li><li>테스트할 때 의존관계 너무 많이 만드는 거 아님. 인생은 테스트 기다리며 지내기엔너무 짧다.</li><li>너무 완벽하려 노력하지 마라. 에초에 내 실력으로는 택도 없다. 할 수 있는범위에서 최대한 하는거지 뭐..</li><li>깔끔하게 개선되었을 때의 기분좋은 감각을 기억하라능.</li><li>일하는게 너무 헬이라 생각되면 불평하면서 계속다니지 말고 깔끔하게 이직하라능.자는 시간 빼고 80% 정도를 일하면서 지내는데 즐겁기라도 해야지.</li><li>개발자끼리 의견 일치를 못볼때 설득하는 거보다 짜서 보여주는게 효율적임.내가 많이 당했는데 별로 맘에 안들어도 완성품 들고오면 리젝하기 힘들더라.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;도입&quot;&gt;&lt;a href=&quot;#도입&quot; class=&quot;headerlink&quot; title=&quot;도입&quot;&gt;&lt;/a&gt;도입&lt;/h1&gt;&lt;p&gt;tl;dr red - green - refactor&lt;/p&gt;
&lt;p&gt;어디 보낼글 아니니 반말로 써야지.&lt;/p&gt;
&lt;p&gt;테스트 안하는</summary>
      
    
    
    
    
    <category term="test" scheme="http://marocchino.net/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>묵시는 사악해</title>
    <link href="http://marocchino.net/2017/01/06/implicit-is-evil/"/>
    <id>http://marocchino.net/2017/01/06/implicit-is-evil/</id>
    <published>2017-01-05T16:11:43.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<p>이 글은 <a href="http://ruby-korea.github.io/advent-calendar/" target="_blank" rel="noopener">루비 대림 달력</a>에 빈칸매꾸려고 쓴 글입니다.</p><ul><li><a href="https://github.com/ahastudio/til/blob/master/ruby/20161207-metaprogramming.md" target="_blank" rel="noopener">7일: Ruby Meta-programming</a></li><li><a href="https://github.com/cavinkwon/redux.rb" target="_blank" rel="noopener">9일: Rack 으로 미들웨어 이해하기</a></li></ul><p>다음 코드의 결과를 예측해보세요.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="regexp">//</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">a == <span class="regexp">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">a.! == <span class="regexp">//</span>.!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">!a == !<span class="regexp">//</span></span><br></pre></td></tr></table></figure><p>루비 2.4 기준으로 정답은 1. <code>true</code>, 2. <code>true</code>, 3. <code>false</code> 입니다.</p><h1 id="해설"><a href="#해설" class="headerlink" title="해설"></a>해설</h1><p>루비에서 falsey값은 아시다시피 <code>nil</code>과 <code>false</code>뿐입니다. <code>//</code>같은 정규식 객체가falsey로 취급되는건 누가봐도 이상하죠. 이것 저것 시도하다 <code>if</code>문안에 넣어보니단서가 될만한 경고를 찾았습니다.</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">irb&gt; p <span class="number">1</span><span class="keyword">if</span> /<span class="regexp">/</span></span><br><span class="line"><span class="regexp">(irb):2: warning: regex literal in condition</span></span><br><span class="line"><span class="regexp">=&gt; nil</span></span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/questions/29164490/ruby-why-do-i-get-warning-regex-literal-in-condition-here" target="_blank" rel="noopener">스택오버플로우</a>에따르면 정규식 리터럴은 묵시적으로 <code>Regexp#~</code>로 해석되고 이는 <code>$_</code>에 대해 매칭을수행하고 결과를 반환합니다. 결국 <code>!//</code>는 <code>! ~//</code>로 변환되고 <code>~//</code>는 <code>$_</code>에들어있는 <code>nil</code>에 매칭해 <code>nil</code>을 반환 <code>!nil</code>은 <code>true</code>로 변환되게 됩니다.<code>$_</code>는 변수라 여기에 값을 넣으면 행동이 바뀝니다.</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ irb(main)<span class="symbol">:</span><span class="number">004</span><span class="symbol">:</span><span class="number">0</span>* $_ = <span class="string">"하이요"</span></span><br><span class="line">=&gt; <span class="string">"하이요"</span></span><br><span class="line">+ irb(main)<span class="symbol">:</span><span class="number">005</span><span class="symbol">:</span><span class="number">0</span>&gt; <span class="regexp">//</span></span><br><span class="line">=&gt; /<span class="regexp">/</span></span><br><span class="line"><span class="regexp">+ irb(main):006:0&gt; ~/</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">=&gt; 0</span></span><br><span class="line"><span class="regexp">+ irb(main):007:0&gt; !/</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">=&gt; false</span></span><br></pre></td></tr></table></figure><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>어쨋든 이런 묵시적 변환은 가독성을 해칩니다. 이기회에 좀더 현대적인 언어로 갈아타던가 파서가 해석하는 대로 적어서 오해를 줄이도록 합시다.</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!a != ! ~<span class="regexp">//</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>a != <span class="regexp">//</span>.match?($_)</span><br><span class="line"></span><br><span class="line">text = gets</span><br><span class="line"><span class="number">1</span>a != <span class="regexp">//</span>.match?(text)</span><br></pre></td></tr></table></figure><p>끗</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;이 글은 &lt;a href=&quot;http://ruby-korea.github.io/advent-calendar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;루비 대림 달력&lt;/a&gt;에 빈칸
매꾸려고 쓴 글입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a </summary>
      
    
    
    
    
    <category term="ruby" scheme="http://marocchino.net/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>rspec 잘쓰고 계신가요?</title>
    <link href="http://marocchino.net/2016/12/04/about-rspec/"/>
    <id>http://marocchino.net/2016/12/04/about-rspec/</id>
    <published>2016-12-04T01:00:00.000Z</published>
    <updated>2021-01-11T23:08:13.024Z</updated>
    
    <content type="html"><![CDATA[<p>이 글은 <a href="http://ruby-korea.github.io/advent-calendar/" target="_blank" rel="noopener">루비 대림 달력</a>용으로작성하는 글 입니다.</p><ul><li><a href="http://riseshia.github.io/2016/12/01/ruby-2-4-0-preview.html" target="_blank" rel="noopener">3일: Ruby 2.4.0 Preview</a></li><li><a href="https://code.iamseapy.com/archives/38" target="_blank" rel="noopener">5일: puma 웹서버 주기적으로 재시작</a></li></ul><p>tl;dr: Given, When, Then 단위로 나누어서 작성하세요.</p><h1 id="rspec은"><a href="#rspec은" class="headerlink" title="rspec은"></a>rspec은</h1><p>설명할 것도 없이 레일스를 사용한다면 한번은 봤을 법한 가장 대중적인 BDD테스트프레임 워크입니다.</p><h1 id="BDD는-뭔가요"><a href="#BDD는-뭔가요" class="headerlink" title="BDD는 뭔가요"></a>BDD는 뭔가요</h1><p>사양을 기술에 집중하는 TDD의 확장입니다. 루비에서는 rspec말고도 minitest-spec,cucumber, rspec-feature등을 사용해 할 수도 있습니다. 특정 서브젝트에 대해 조건을주고 그 결과를 확인하는 3단계로 나누어 작성하는게 특징입니다. 에러를 읽기도 쉽고찾기도 쉽죠.</p><h1 id="코드로-이야기-합시다"><a href="#코드로-이야기-합시다" class="headerlink" title="코드로 이야기 합시다"></a>코드로 이야기 합시다</h1><p>다음과 같은 사양서의 테스트를 작성해 봅시다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">기능: Stack</span><br><span class="line"></span><br><span class="line">조건 새 스택을 만듬</span><br><span class="line">그러면 비어있음</span><br><span class="line"></span><br><span class="line">만일 스택에 요소가 추가됨</span><br><span class="line">그러면 그 요소가 스택의 제일 위에 위치함</span><br><span class="line"></span><br><span class="line">만일 스택이 N개의 요소를 가짐</span><br><span class="line">그리고 요소 E가 스택의 제일 위에 위치함</span><br><span class="line">그러면 팝 연산은 E를 반환함</span><br><span class="line">그리고 새 스택 크기는 N-1이 됨</span><br></pre></td></tr></table></figure><p>먼저 minitest로 작성해 보면 이렇게 될 것 같습니다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> &lt; Minitest::Test</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span></span></span><br><span class="line">    @stack = Stack.new</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_new</span></span></span><br><span class="line">    assert @stack.empty?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_add</span></span></span><br><span class="line">    @stack.add(<span class="string">"A"</span>)</span><br><span class="line">    assert_equal <span class="string">"A"</span>, @stack.top</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_pop</span></span></span><br><span class="line">    elements = <span class="string">%w(A B C D E)</span></span><br><span class="line">    elements.each &#123; <span class="params">|e|</span> @stack.add(e) &#125;</span><br><span class="line">    assert_equal <span class="string">"E"</span>, @stack.pop</span><br><span class="line">    assert_equal <span class="number">4</span>, @stack.size</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>일단 있는 그대로 rspec문법으로 옮겨보죠.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RSpec.describe Stack <span class="keyword">do</span></span><br><span class="line">  subject(<span class="symbol">:stack</span>) &#123; Stack.new &#125;</span><br><span class="line"></span><br><span class="line">  it <span class="string">".new"</span> <span class="keyword">do</span></span><br><span class="line">    is_expected.to be_empty</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  it <span class="string">"#top"</span> <span class="keyword">do</span></span><br><span class="line">    stack.add(<span class="string">"A"</span>)</span><br><span class="line">    expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  it <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">    elements = <span class="string">%w(A B C D E)</span></span><br><span class="line">    elements.each &#123; <span class="params">|e|</span> stack.add(e) &#125;</span><br><span class="line">    expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">    expect(stack.size).to be <span class="number">4</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>TDD일때는 문제가 안되지만, 이런 코드는 설명을 코드의 구현에 의존하기 때문에설명충이 미덕인 BDD로써는 좋은 코드가 아닙니다. 단계별로 개선해 봅시다.</p><h2 id="describe-사용하기"><a href="#describe-사용하기" class="headerlink" title="describe 사용하기"></a>describe 사용하기</h2><p>사양서의 Given에 해당하는 부분이고 테스트 할 대상을 지정할 때 사용하는 키워드입니다. 이미 Stack이 describe 되어있긴 하지만, 관례대로 클래스명 -&gt; 메서드명의두 단계로 넣어 무엇을 태스트하는지 좀 더 명확하게 하겠습니다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">RSpec.describe Stack <span class="keyword">do</span></span><br><span class="line">  subject(<span class="symbol">:stack</span>) &#123; Stack.new &#125;</span><br><span class="line">  describe <span class="string">".new"</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">"비어 있음"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#top"</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">"만일 스택에 요소가 추가됨 그러면 그 요소가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">      stack.add(<span class="string">"A"</span>)</span><br><span class="line">      expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">"만일 스택이 N개의 요소를 가짐 그리고 요소 E가 스택의 제일 위에 위치함"</span> \</span><br><span class="line">       <span class="string">"그러면 팝 연산은 E를 반환함 그리고 새 스택 크기는 N-1이 됨"</span> <span class="keyword">do</span></span><br><span class="line">      elements = <span class="string">%w(A B C D E)</span></span><br><span class="line">      elements.each &#123; <span class="params">|e|</span> stack.add(e) &#125;</span><br><span class="line">      expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">      expect(stack.size).to be <span class="number">4</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>아직 설명이 너무 길군요. 조금 더 분해해 봅시다.</p><h2 id="context-사용하기"><a href="#context-사용하기" class="headerlink" title="context 사용하기"></a>context 사용하기</h2><p>조건을 정의할 때 사용합니다. 사양의 만일(When)에 해당하는 부분이죠.중요한 포인트는 context와 before를 하나의 묶음 처럼 생각하는 것입니다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"#top"</span> <span class="keyword">do</span></span><br><span class="line">  context <span class="string">"만일 스택에 요소가 추가됨"</span> <span class="keyword">do</span></span><br><span class="line">    before &#123; stack.add(<span class="string">"A"</span>) &#125;</span><br><span class="line">    it <span class="string">"그러면 그 요소가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">describe <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">  context <span class="string">"만일 스택이 N개의 요소를 가짐 그리고 요소 E가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">    before &#123; <span class="string">%w(A B C D E)</span>.each &#123; <span class="params">|e|</span> stack.add(e) &#125; &#125;</span><br><span class="line">    it <span class="string">"그러면 팝 연산은 E를 반환함 그리고 새 스택 크기는 N-1이 됨"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">      expect(stack.size).to be <span class="number">4</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="부작용-없에기"><a href="#부작용-없에기" class="headerlink" title="부작용 없에기"></a>부작용 없에기</h2><p>BDD의 세계에서는 실행 시간을 희생해서라도 부작용을 없에고 싶어합니다. it 하나에expect하나 이상 사용하는것은 좋지않은 징후죠. 나누어 보겠습니다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">  context <span class="string">"만일 스택이 N개의 요소를 가짐 그리고 요소 E가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">    before &#123; <span class="string">%w(A B C D E)</span>.each &#123; <span class="params">|e|</span> stack.add(e) &#125; &#125;</span><br><span class="line">    it <span class="string">"그러면 팝 연산은 E를 반환함"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    it <span class="string">"그러면 팝연산 후의 새 스택 크기는 N-1이 됨"</span> <span class="keyword">do</span></span><br><span class="line">      stack.pop</span><br><span class="line">      expect(stack.size).to be <span class="number">4</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>이제 더 할일이 없어보이네요.</p><h2 id="일단-완성"><a href="#일단-완성" class="headerlink" title="일단 완성"></a>일단 완성</h2><p>전체 코드는 이렇습니다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">RSpec.describe Stack <span class="keyword">do</span></span><br><span class="line">  subject(<span class="symbol">:stack</span>) &#123; Stack.new &#125;</span><br><span class="line">  describe <span class="string">".new"</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">"비어 있음"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#top"</span> <span class="keyword">do</span></span><br><span class="line">    context <span class="string">"만일 스택에 요소가 추가됨"</span> <span class="keyword">do</span></span><br><span class="line">      before &#123; stack.add(<span class="string">"A"</span>) &#125;</span><br><span class="line">      it <span class="string">"그러면 그 요소가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">        expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">    context <span class="string">"만일 스택이 N개의 요소를 가짐 그리고 요소 E가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">      before &#123; <span class="string">%w(A B C D E)</span>.each &#123; <span class="params">|e|</span> stack.add(e) &#125; &#125;</span><br><span class="line">      it <span class="string">"그러면 팝 연산은 E를 반환함"</span> <span class="keyword">do</span></span><br><span class="line">        expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      it <span class="string">"그러면 팝연산 후의 새 스택 크기는 N-1이 됨"</span> <span class="keyword">do</span></span><br><span class="line">        stack.pop</span><br><span class="line">        expect(stack.size).to be <span class="number">4</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>보시는 것 처럼 TDD 스타일에 비해 자연어에 가깝게 적으려는 노오오력이 많이필요합니다. 하지만 내부 코드를 몰라도 단계적으로 조건의 설명이 명확히 되는건장점이라 할 수 있죠. 저는 이정도로 만족합니다만, 좀 더 bdd사양에 가깝게작성하시고 싶으시면 rspec-given이라는 dsl이 있긴 합니다.</p><h2 id="rspec-given"><a href="#rspec-given" class="headerlink" title="rspec-given"></a>rspec-given</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">RSpec.describe Stack <span class="keyword">do</span></span><br><span class="line">  Given(<span class="symbol">:stack</span>) &#123; Stack.new &#125;</span><br><span class="line">  describe <span class="string">".new"</span> <span class="keyword">do</span></span><br><span class="line">    Then <span class="string">"비어 있음"</span> <span class="keyword">do</span></span><br><span class="line">      expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#top"</span> <span class="keyword">do</span></span><br><span class="line">    context <span class="string">"만일 스택에 요소가 추가됨"</span> <span class="keyword">do</span></span><br><span class="line">      When &#123; stack.add(<span class="string">"A"</span>) &#125;</span><br><span class="line">      Then <span class="string">"그러면 그 요소가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">        expect(stack.top).to eq <span class="string">"A"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe <span class="string">"#pop"</span> <span class="keyword">do</span></span><br><span class="line">    context <span class="string">"만일 스택이 N개의 요소를 가짐 그리고 요소 E가 스택의 제일 위에 위치함"</span> <span class="keyword">do</span></span><br><span class="line">      When &#123; <span class="string">%w(A B C D E)</span>.each &#123; <span class="params">|e|</span> stack.add(e) &#125; &#125;</span><br><span class="line">      Then <span class="string">"그러면 팝 연산은 E를 반환함"</span> <span class="keyword">do</span></span><br><span class="line">        expect(stack.pop).to eq <span class="string">"E"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      Then <span class="string">"그러면 팝연산 후의 새 스택 크기는 N-1이 됨"</span> <span class="keyword">do</span></span><br><span class="line">        stack.pop</span><br><span class="line">        expect(stack.size).to be <span class="number">4</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>큐컴버 만큼은 아니지만, 어느정도 정돈되어 보이네요.</p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>bdd에 충실하게 rspec을 작성하는 법을 알아 보았습니다. 일정이 바쁘다던가사양이 복잡하던가 이러저러한 이유가 있긴하겠지만<a href="http://www.rubyinside.com/dhh-offended-by-rspec-debate-4610.html" target="_blank" rel="noopener">DHH도 불평</a>못하게 깔끔하게 작성하도록 노력해봅시다. :)</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="http://www.chrisdpeters.com/introduction-feature-specs-rspec/" target="_blank" rel="noopener">http://www.chrisdpeters.com/introduction-feature-specs-rspec/</a></li><li><a href="https://cucumber.io/" target="_blank" rel="noopener">https://cucumber.io/</a></li><li><a href="https://github.com/rspec-given/rspec-given" target="_blank" rel="noopener">https://github.com/rspec-given/rspec-given</a></li><li><a href="http://betterspecs.org/ko/" target="_blank" rel="noopener">http://betterspecs.org/ko/</a></li><li><a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Behavior-driven_development</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;이 글은 &lt;a href=&quot;http://ruby-korea.github.io/advent-calendar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;루비 대림 달력&lt;/a&gt;용으로
작성하는 글 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="ruby" scheme="http://marocchino.net/tags/ruby/"/>
    
    <category term="rspec" scheme="http://marocchino.net/tags/rspec/"/>
    
    <category term="bdd" scheme="http://marocchino.net/tags/bdd/"/>
    
  </entry>
  
  <entry>
    <title>Custom matcher in exunit</title>
    <link href="http://marocchino.net/2016/10/28/custom-assert-in-exunit/"/>
    <id>http://marocchino.net/2016/10/28/custom-assert-in-exunit/</id>
    <published>2016-10-27T19:44:05.000Z</published>
    <updated>2021-01-11T23:08:13.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h1><p>그냥 <code>assert Regex.match?(regex, actual)</code>는 true/false만 반환해서 디버깅할 때곤란했는데, 이걸 매번 메세지로 찍어주자니 귀찮아서 아예 매쳐로 만들어 볼려고하니 문서로 설명되어있지 않아서 정리겸..</p><h1 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h1><p>피닉스는 이미 설정 되어있어서 필요없지만 직접 만든 라이브러리라면,루비에서처럼 require로는 못하고 mix.exs에서 로드 경로를 설정해야 한다.테스트 환경에서만 로드하게 할려면 이렇게 하면된다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">[...,</span><br><span class="line"> <span class="symbol">elixirc_paths:</span> elixirc_paths(Mix.env),</span><br><span class="line"> ...]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">elixirc_paths</span></span>(<span class="symbol">:test</span>), <span class="symbol">do:</span> [<span class="string">"lib"</span>, <span class="string">"test/support"</span>]</span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">elixirc_paths</span></span>(_),     <span class="symbol">do:</span> [<span class="string">"lib"</span>]</span><br></pre></td></tr></table></figure><p>설정후에 일단 한번 컴파일 해주자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix compile</span><br></pre></td></tr></table></figure><h1 id="매쳐-작성"><a href="#매쳐-작성" class="headerlink" title="매쳐 작성"></a>매쳐 작성</h1><p>내가 필요했던건 정규식으로 스트링을 검증해주는 매쳐다.test/support 안에 넣어준다. 파일명이 exs가 아니라 ex인것에 주의.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProjectName.Matcher</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">import</span> ExUnit.Assertions, <span class="symbol">only:</span> [<span class="symbol">assert:</span> <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">assert_match</span></span>(regex, actual) <span class="keyword">do</span></span><br><span class="line">    assert Regex.match?(regex, actual), <span class="string">"<span class="subst">#&#123;actual&#125;</span> is not match."</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h1><p>평범하게 임포트해서 사용하면 된다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ProjectName.Matcher, <span class="symbol">only:</span> [<span class="symbol">assert_match:</span> <span class="number">2</span>]</span><br><span class="line">test <span class="string">"123 matches \\d+"</span> <span class="keyword">do</span></span><br><span class="line">  assert_match <span class="string">~r/\A\d+\z/</span>, <span class="string">"123"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>끝.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; title=&quot;동기&quot;&gt;&lt;/a&gt;동기&lt;/h1&gt;&lt;p&gt;그냥 &lt;code&gt;assert Regex.match?(regex, actual)&lt;/code&gt;는 true/false만 반환해서 디</summary>
      
    
    
    
    
    <category term="elixir" scheme="http://marocchino.net/tags/elixir/"/>
    
    <category term="exunit" scheme="http://marocchino.net/tags/exunit/"/>
    
    <category term="test" scheme="http://marocchino.net/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>elm from elixir</title>
    <link href="http://marocchino.net/2016/10/17/elm-from-elixir/"/>
    <id>http://marocchino.net/2016/10/17/elm-from-elixir/</id>
    <published>2016-10-17T01:25:02.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<p>이 글은 뽐뿌 글이 아니니 엘름의 좋은 점을 알고싶다면  <a href="http://bestalign.github.io/2015/11/28/elm-for-javascript-developers/index.html" target="_blank" rel="noopener">다른글</a>을읽으세요.</p><h1 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h1><p>조금 다르긴한데 많이 신경쓰이는 정도는 아니다.몇가지 주목할 부분은..</p><ul><li><code>!=</code>대신 <code>\=</code>을 사용한다.</li><li>and or가 없다.</li><li><code>||</code> <code>&amp;&amp;</code> 도 Bool 타입만 받아서 엘릭서에서 인라인 if 대신 사용하던<code>valid or raise Error</code> 를 사용할 수 없다.</li><li><code>/</code> 는 Float를 반환한다.</li><li><code>div/2</code> 는 <code>//</code> 로 <code>rem/2</code>은 <code>%</code>로 사용할 수 있다.</li></ul><h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><p>basic 문서에 파이프가  없어서 없구나 싶었는데 그냥 메서드에 있었다 .엘릭서에는 없던 파이프가 몇개 더 있다. 커링에 더 특화되어 있는 느낌.</p><h1 id="강타입과-컴파일"><a href="#강타입과-컴파일" class="headerlink" title="강타입과 컴파일"></a>강타입과 컴파일</h1><p>아.. 정말 여태까지 이렇게 채크해주는 언어를 해본적이 없어서 정말 미쳐버리는 줄알았는데 어느 정도 익숙해졌다. 일단 함수 선언 위에 타입을 전부 적어야 하고 이게실제 리턴 값과 다르면 컴파일이 안된다.처음에는 타입 맞추느라 삽질많이 했는데 익숙 해지니 그냥 저냥 할 만 하다. 루비나엘릭서에서는 파이프연결해 중간값 확인하면서 코딩했었는데 최종 타입 맞지않으면실행이 안되니 그런식으로 코딩하기 힘들어졌다. 일단 제일 많이 삽질했던 두 개만언급하고 넘어가자.</p><h2 id="Maybe-XX"><a href="#Maybe-XX" class="headerlink" title="Maybe XX"></a>Maybe XX</h2><p>그냥 해당 타입이거나 Nothing을 반환 하는데 성공 했을때 (Just XX) 실패 했을때(Nothing)으로 나온다 map같은 이터레이터에 먹일 때 보통 이런 상태 말고 값만있을거라 예상하는데, 그렇지 않으니 처리하기 좀 번거롭다. 난 보통 케이스로처리한다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> a <span class="keyword">of</span></span><br><span class="line">    <span class="type">Just</span> x -&gt; x</span><br><span class="line">    <span class="type">Nothing</span> -&gt; <span class="type">Debug</span>.crash(<span class="string">"error"</span>)</span><br></pre></td></tr></table></figure><p>뭐.. 당연한 이야기지만 결과가 nil이 아니므로</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value || default</span><br></pre></td></tr></table></figure><p>같은 식으로는 쓸 수 없다. 이렇게 해야한다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Maybe</span>.withDefault <span class="number">100</span> (<span class="type">Just</span> <span class="number">42</span>)   <span class="comment">-- 42</span></span><br><span class="line"><span class="type">Maybe</span>.withDefault <span class="number">100</span> <span class="type">Nothing</span>     <span class="comment">-- 100</span></span><br></pre></td></tr></table></figure><p>이터레이터 안에서 value만 뽑고 싶을 때에는 이렇게 하면된다.(내가 할 줄 몰라서) 좀 괴로웠다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">modifyList</span> : <span class="type">List</span> -&gt; <span class="type">Maybe</span> <span class="type">Nothing</span> (<span class="type">List</span> a)</span><br><span class="line"><span class="title">modifyList</span> list =</span><br><span class="line">    list</span><br><span class="line">        |&gt; some_maybe_methods</span><br><span class="line">        |&gt; <span class="type">List</span>.foldr (<span class="type">Maybe</span>.map2 (::)) (<span class="type">Just</span> [])</span><br></pre></td></tr></table></figure><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>성공했을 때 (Ok value), 실패했을 때 (Err reason)이 나온다.이녀석도 케이스로 처리해야 한다. 그거말고는 Maybe랑 비슷하게 하면 된다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> a <span class="keyword">of</span></span><br><span class="line">    <span class="type">Just</span> x -&gt; x</span><br><span class="line">    <span class="type">Nothing</span> -&gt; <span class="type">Debug</span>.crash(<span class="string">"error"</span>)</span><br></pre></td></tr></table></figure><h1 id="파이프-순서"><a href="#파이프-순서" class="headerlink" title="파이프 순서"></a>파이프 순서</h1><p>엘릭서와 다르게 제일 뒤에 있는게 사용되는데,  덕분에 가독성에서 좀 손해를보는 느낌이다. 예를 들자면 적어도 나에게는</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span>.contains? <span class="string">"elixir of life"</span>, <span class="string">"of"</span></span><br></pre></td></tr></table></figure><p>보다는</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span>.contains <span class="string">"of"</span> <span class="string">"elm tree of life"</span></span><br></pre></td></tr></table></figure><p>가 읽기 힘들다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"elm tree of life"</span> |&gt; <span class="type">String</span>.contains <span class="string">"of"</span></span><br></pre></td></tr></table></figure><p>라고 적을 수 있긴하다. 실제로 그렇게 적을지는 또 다른 문제지만,</p><p>라고 적으면 나쁜 점만 있는것 같지만.. 사실 커링 때문에 더 편해진 것도 많다.이런 상황을 생각해보자.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a, b), <span class="symbol">do:</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_all</span></span>(list, num) <span class="keyword">do</span></span><br><span class="line">  list</span><br><span class="line">  |&gt; Enum.map(&amp;add(&amp;<span class="number">1</span>, num))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>엘릭서에서는 아리티가 일치하지 않으면 외부 참조를 넘길수 없어서 이런레핑이 최선이었다.</p><p>하지만 엘름은 다르다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">add</span> : <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">add</span> a b =</span><br><span class="line">    a + b</span><br><span class="line"></span><br><span class="line"><span class="title">addAll</span> : <span class="type">Int</span> -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> a</span><br><span class="line"><span class="title">addAll</span> num list =</span><br><span class="line">    <span class="keyword">let</span></span><br><span class="line">        plusNum = (add num)</span><br><span class="line">    <span class="keyword">in</span></span><br><span class="line">        list</span><br><span class="line">            |&gt; <span class="type">List</span>.map plusNum</span><br></pre></td></tr></table></figure><p>인자가 불완전하게 넘겨진 상태도 함수이므로 그걸 그대로 함수 인자로 넘길 수 있다.</p><h1 id="패턴-매칭"><a href="#패턴-매칭" class="headerlink" title="패턴 매칭"></a>패턴 매칭</h1><p>모든 조건을 커버 하지 못하면 컴파일이 안된다. 특히 리스트가 컴파일 시점에서갯수까지는 알수 없기때문에 let에는 디스트럭쳐링 할 수 없고 case를 사용해야 한다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c] = list |&gt; Enum.sort</span><br></pre></td></tr></table></figure><p>그래서 위에 있는 엘릭서에서는 간단히 되던 코드가 이렇게 되버렸다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> (<span class="type">List</span>.sort list) <span class="keyword">of</span></span><br><span class="line">    a::b::c::[] -&gt; ...</span><br><span class="line">    _ -&gt; <span class="type">Debug</span>.crash(<span class="string">"Impossible"</span>)</span><br></pre></td></tr></table></figure><p>with도 없고 리스트 몇개만 매칭으로 풀어도 case중첩으로 산으로 가서타입에따라서는 그냥 없다고 생각하고 작성하는게 편할 수도 있다. 패턴 매칭이약해서 if else 구문을 평범하게 사용하는것도 다른 문화.</p><h1 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h1><ul><li>List의 렌덤 억세스에 관한 함수가 없다. 굳이 하고 싶으면 어레이로 변환해서해야한다. 근데 변환 여러번 하는 거보다 head tail로 어찌어찌하는게 비용이 적을것 같다.</li><li>요즘은 어떨지 모르겠는데 옛날에 자바 싫어하는 이유 중 하나가 정규식 쓰기힘들어서 였는데 , 정규식용 리터럴이 따로 준비되어있지 않고 스트링으로 해서자바에서 정규식 쓰던 생각난다.</li></ul><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>단순하게 되던게 번거로워 진 부분이 좀 많아서 생산성만 좀 더 뽑을 수 있으면 좋을것 같다는 생각을 했다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;이 글은 뽐뿌 글이 아니니 엘름의 좋은 점을 알고싶다면  &lt;a href=&quot;http://bestalign.github.io/2015/11/28/elm-for-javascript-developers/index.html&quot; target=&quot;_blank&quot; </summary>
      
    
    
    
    
    <category term="elixir" scheme="http://marocchino.net/tags/elixir/"/>
    
    <category term="elm" scheme="http://marocchino.net/tags/elm/"/>
    
  </entry>
  
  <entry>
    <title>Bash tips</title>
    <link href="http://marocchino.net/2016/09/29/bash-tips/"/>
    <id>http://marocchino.net/2016/09/29/bash-tips/</id>
    <published>2016-09-29T06:13:26.000Z</published>
    <updated>2021-01-11T23:08:13.024Z</updated>
    
    <content type="html"><![CDATA[<p>안적어두면 자꾸까먹어서 정리할 겸..</p><h1 id="여러-파일-치환"><a href="#여러-파일-치환" class="headerlink" title="여러 파일 치환"></a>여러 파일 치환</h1><p>이런 작업은 vim에서 하는거보다는 밖에서 하는게 빠르고 정규식도 POSIX라 편하다.오타 수정할 때 쓰면 좋다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -pi -e <span class="string">'s/old-string/new-string/g'</span> my-files-*.txt</span><br></pre></td></tr></table></figure><p>조금 덧붙여서 커밋된 파일만 순회할 수도 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -pi -e <span class="string">'s/old-string/new-string/g'</span> $(git ls-tree HEAD --name-only -r)</span><br></pre></td></tr></table></figure><p>특정 폴더만 지정하려면 – 쓰면된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -pi -e <span class="string">'s/old-string/new-string/g'</span> \</span><br><span class="line">  $(git ls-tree HEAD --name-only -r -- ./folder)</span><br></pre></td></tr></table></figure><h1 id="clipboard-내용으로-사전열기"><a href="#clipboard-내용으로-사전열기" class="headerlink" title="clipboard 내용으로 사전열기"></a>clipboard 내용으로 사전열기</h1><p>번역하고 있을때 유용하게 쓴다.OSX한정이고 bash tip이 아닐지도 모르겠는데 이렇게 한다.alias로 해두면 세손가락 더블탭보다 스트로크가 적다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a /Applications/Dictionary.app/ --args $(pbpaste)</span><br></pre></td></tr></table></figure><h1 id="패턴에-따라-여러파일-지정하기"><a href="#패턴에-따라-여러파일-지정하기" class="headerlink" title="패턴에 따라 여러파일 지정하기"></a>패턴에 따라 여러파일 지정하기</h1><p>디렉토리 구조가 비슷하다거나. 확장자만 조금 다르거나 할 때 사용할 수있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#123;ko,.&#125;/lessions/basic/test.md</span><br><span class="line">vim readme.&#123;ko,en&#125;.md</span><br></pre></td></tr></table></figure><h1 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h1><p>기본적으로 이렇다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [[ condition ]]; <span class="keyword">then</span></span><br><span class="line">  something</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  something</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>구문은 딱히 특별할거 없고, condition만 신경쓰면 된다.</p><table><thead><tr><th>명령</th><th>설명</th></tr></thead><tbody><tr><td>! 표현식</td><td>표현식이 참이 아님</td></tr><tr><td>-n 문자열</td><td>문자열의 길이가 0보다 큼</td></tr><tr><td>-z 문자열</td><td>문자열의 길이가 0</td></tr><tr><td>문자열1 = 문자열2</td><td>두문자열이 같음</td></tr><tr><td>문자열1 != 문자열2</td><td>두문자열이 다름</td></tr><tr><td>숫자1 -eq 숫자2</td><td>두숫자가 같음</td></tr><tr><td>숫자1 -ne 숫자2</td><td>두숫자가 다름</td></tr><tr><td>숫자1 -gt 숫자2</td><td>숫자1이 숫자2보다 큼</td></tr><tr><td>숫자1 -lt 숫자2</td><td>숫자1이 숫자2보다 작음</td></tr><tr><td>-d 파일</td><td>디렉토리가 있음</td></tr><tr><td>-e 파일</td><td>파일이 있음</td></tr><tr><td>-r 파일</td><td>파일이 있고 읽기권한이 있음</td></tr><tr><td>-s 파일</td><td>파일이 있고 크기가 0보다 큼</td></tr><tr><td>-w 파일</td><td>파일이 있고 쓰기권한이 있음</td></tr><tr><td>-x 파일</td><td>파일이 있고 실행권한이 있음</td></tr></tbody></table><h1 id="변수들"><a href="#변수들" class="headerlink" title="$변수들"></a>$변수들</h1><table><thead><tr><th>표현</th><th>설명</th></tr></thead><tbody><tr><td>$0</td><td>셸스크립트 이름</td></tr><tr><td>$1</td><td>첫 번째 인자</td></tr><tr><td>$2</td><td>두 번째 인자</td></tr><tr><td>$@</td><td>인자 배열</td></tr><tr><td>$#</td><td>인자 개수</td></tr></tbody></table><h1 id="기본값-설정하기"><a href="#기본값-설정하기" class="headerlink" title="기본값 설정하기"></a>기본값 설정하기</h1><p>변수가 할당안됐을 기본값을 지정할 수 있다. if문을 줄이려할 때 유용.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello, <span class="variable">$&#123;NAME-World&#125;</span>! <span class="comment"># =&gt; Hello, World!</span></span><br><span class="line">NAME=Alice</span><br><span class="line"><span class="built_in">echo</span> Hello, <span class="variable">$&#123;NAME-World&#125;</span>! <span class="comment"># =&gt; Hello, Alice!</span></span><br></pre></td></tr></table></figure><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html" target="_blank" rel="noopener">https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html</a><a href="http://www.tldp.org/LDP/abs/html/parameter-substitution.html" target="_blank" rel="noopener">http://www.tldp.org/LDP/abs/html/parameter-substitution.html</a><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-ko.md" target="_blank" rel="noopener">https://github.com/jlevy/the-art-of-command-line/blob/master/README-ko.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;안적어두면 자꾸까먹어서 정리할 겸..&lt;/p&gt;
&lt;h1 id=&quot;여러-파일-치환&quot;&gt;&lt;a href=&quot;#여러-파일-치환&quot; class=&quot;headerlink&quot; title=&quot;여러 파일 치환&quot;&gt;&lt;/a&gt;여러 파일 치환&lt;/h1&gt;&lt;p&gt;이런 작업은 vim에서 하는거보다</summary>
      
    
    
    
    
    <category term="bash" scheme="http://marocchino.net/tags/bash/"/>
    
    <category term="fish" scheme="http://marocchino.net/tags/fish/"/>
    
  </entry>
  
  <entry>
    <title>Set MIX_ENV in mix task</title>
    <link href="http://marocchino.net/2016/09/28/set-mix-env-in-mix-task/"/>
    <id>http://marocchino.net/2016/09/28/set-mix-env-in-mix-task/</id>
    <published>2016-09-28T02:30:46.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<p>가끔 테스트 명령이 여럿 필요할 때가 있다.커버리지 설정을 넣고 싶다던가.환경변수를 바꿔서 실행해야 한다던다..</p><p>Mix에는 이런경우 간단히 추가할 수있는 alias가있다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Handsup.Mixfile</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Mix.Project</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">    [...</span><br><span class="line">     <span class="symbol">aliases:</span> aliases(),</span><br><span class="line">     ...]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">aliases</span></span> <span class="keyword">do</span></span><br><span class="line">    [<span class="string">"test.setup"</span>: <span class="string">"ecto.create"</span>,</span><br><span class="line">     <span class="string">"test"</span>: [<span class="string">"credo --strict"</span>, <span class="string">"ecto.migrate"</span>, <span class="string">"test"</span>],</span><br><span class="line">     <span class="string">"t"</span>: <span class="string">"test"</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>좋다. 이제 실행시켜보면 잘되겠지 싶었는데 dev로 실행시켜 버린다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mix t</span><br><span class="line">...</span><br><span class="line">** (Mix) <span class="string">"mix test"</span> is running on environment <span class="string">"dev"</span>. If you are running tests</span><br><span class="line">along another task, please <span class="built_in">set</span> MIX_ENV explicitly</span><br></pre></td></tr></table></figure><p>프라이빗 함수를 만들어 알리아스 체인 앞에 넣는다던가 이것 저것 시도해봤지만 뒤의테스크에 영향을 줄 수 없어서 방치하고 있었는데 전용 옵션이 따로있었다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">  [...</span><br><span class="line">   <span class="symbol">aliases:</span> aliases(),</span><br><span class="line">   <span class="symbol">preferred_cli_env:</span> preferred_cli_env()</span><br><span class="line">   ...]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">preferred_cli_env</span></span> <span class="keyword">do</span></span><br><span class="line">  [<span class="string">"t"</span>: <span class="symbol">:test</span>,</span><br><span class="line">   <span class="string">"test.setup"</span>: <span class="symbol">:test</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>이제 실행해보면 테스트환경에서 잘 실행된다.</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="http://elixir-lang.org/docs/stable/mix/Mix.Task.html#preferred_cli_env/1" target="_blank" rel="noopener">http://elixir-lang.org/docs/stable/mix/Mix.Task.html#preferred_cli_env/1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;가끔 테스트 명령이 여럿 필요할 때가 있다.
커버리지 설정을 넣고 싶다던가.
환경변수를 바꿔서 실행해야 한다던다..&lt;/p&gt;
&lt;p&gt;Mix에는 이런경우 간단히 추가할 수있는 alias가있다.&lt;/p&gt;
&lt;figure class=&quot;highlight eli</summary>
      
    
    
    
    
    <category term="elixir" scheme="http://marocchino.net/tags/elixir/"/>
    
    <category term="mix" scheme="http://marocchino.net/tags/mix/"/>
    
  </entry>
  
  <entry>
    <title>Phoenix and Webpack</title>
    <link href="http://marocchino.net/2016/09/24/phoenix-and-webpack/"/>
    <id>http://marocchino.net/2016/09/24/phoenix-and-webpack/</id>
    <published>2016-09-24T00:35:36.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h1><ul><li>브런치보다 웹팩이 익숙하고 유지보수 잘되고 유저가 많다.</li><li>이왕할거면 초기에 하는게 나중에 하는거보다 덜 골치아프다.</li></ul><h1 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h1><p>사용한 버전은 이렇다.</p><ul><li>Elixir 1.3.3</li><li>Phoenix 1.2.1</li><li>Node 6.6.0</li></ul><h1 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h1><p>브런치 없이 설치하는게 더 귀찮은데, 이미 오래전에 없이 설치해버려서.. 그냥 둘 다설명하겠다.</p><p><a href="https://github.com/kenips/phoenix/blob/master/installer/lib/phoenix_new.ex#L48-L57" target="_blank" rel="noopener">소스 코드</a>를<a href="https://github.com/phoenixframework/phoenix/blob/master/installer/lib/phoenix_new.ex#L70-L76" target="_blank" rel="noopener">확인해도</a>알 수 있지만 .gitignore의 내용이 다른걸 재외하면, 두 방식의 파일 차이는 이 정도이다.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-* creating with_brunch/brunch-config.js</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/package.json</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/css/app.css</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/css/phoenix.css</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/assets/favicon.ico</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/assets/images/phoenix.png</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/js/app.js</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/js/socket.js</span></span><br><span class="line"><span class="deletion">-* creating with_brunch/web/static/assets/robots.txt</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/css/app.css</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/favicon.ico</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/images/phoenix.png</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/js/app.js</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/js/phoenix.js</span></span><br><span class="line"><span class="addition">+* creating without_brunch/priv/static/robots.txt</span></span><br></pre></td></tr></table></figure><p>레일스 감각으로 말하면, web/static은 app/assets이고 priv/static은 public/assets다. frontend같은 다른 경로를 사용해도 되긴하는데 스포클렛처럼 타이트하게 묶여있거나 묵시적으로 처리하는 부분이 있는게 아니라, 두 경우 모두 web/static을사용하도록 하겠다.</p><h2 id="파일-구조-잡기"><a href="#파일-구조-잡기" class="headerlink" title="파일 구조 잡기"></a>파일 구조 잡기</h2><h3 id="브런치-없이-설치한-경우"><a href="#브런치-없이-설치한-경우" class="headerlink" title="브런치 없이 설치한 경우"></a>브런치 없이 설치한 경우</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ mix phoenix.new without_brunch --no-brunch</span><br><span class="line">* creating without_brunch/config/config.exs</span><br><span class="line">* creating without_brunch/config/dev.exs</span><br><span class="line">* creating without_brunch/config/prod.exs</span><br><span class="line">* creating without_brunch/config/prod.secret.exs</span><br><span class="line">* creating without_brunch/config/test.exs</span><br><span class="line">* creating without_brunch/lib/without_brunch.ex</span><br><span class="line">* creating without_brunch/lib/without_brunch/endpoint.ex</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/views/error_view_test.exs</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/support/conn_case.ex</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/support/channel_case.ex</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/test_helper.exs</span><br><span class="line">* creating without_brunch/web/channels/user_socket.ex</span><br><span class="line">* creating without_brunch/web/router.ex</span><br><span class="line">* creating without_brunch/web/views/error_view.ex</span><br><span class="line">* creating without_brunch/web/web.ex</span><br><span class="line">* creating without_brunch/mix.exs</span><br><span class="line">* creating without_brunch/README.md</span><br><span class="line">* creating without_brunch/web/gettext.ex</span><br><span class="line">* creating without_brunch/priv/gettext/errors.pot</span><br><span class="line">* creating without_brunch/priv/gettext/en/LC_MESSAGES/errors.po</span><br><span class="line">* creating without_brunch/web/views/error_helpers.ex</span><br><span class="line">* creating without_brunch/lib/without_brunch/repo.ex</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/support/model_case.ex</span><br><span class="line">* creating without_brunch/priv/repo/seeds.exs</span><br><span class="line">* creating without_brunch/.gitignore</span><br><span class="line">* creating without_brunch/priv/static/css/app.css</span><br><span class="line">* creating without_brunch/priv/static/js/app.js</span><br><span class="line">* creating without_brunch/priv/static/robots.txt</span><br><span class="line">* creating without_brunch/priv/static/js/phoenix.js</span><br><span class="line">* creating without_brunch/priv/static/images/phoenix.png</span><br><span class="line">* creating without_brunch/priv/static/favicon.ico</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/controllers/page_controller_test.exs</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/views/layout_view_test.exs</span><br><span class="line">* creating without_brunch/<span class="built_in">test</span>/views/page_view_test.exs</span><br><span class="line">* creating without_brunch/web/controllers/page_controller.ex</span><br><span class="line">* creating without_brunch/web/templates/layout/app.html.eex</span><br><span class="line">* creating without_brunch/web/templates/page/index.html.eex</span><br><span class="line">* creating without_brunch/web/views/layout_view.ex</span><br><span class="line">* creating without_brunch/web/views/page_view.ex</span><br></pre></td></tr></table></figure><p>먼저 .gitignore에 node_modules, priv/static/ 을 추가한다.이 위치는 컴파일 후의 스테틱 파일이 올자리이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Static artifacts</span></span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since we are building assets from web/static,</span></span><br><span class="line"><span class="comment"># we ignore priv/static. You may want to comment</span></span><br><span class="line"><span class="comment"># this depending on your deployment strategy.</span></span><br><span class="line">/priv/static/</span><br></pre></td></tr></table></figure><p>다음은 파일을 옮기고 필요없는 파일을 지운다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p web/static/assets/images web/static/js web/static/css</span><br><span class="line">mv priv/static/images/phoenix.png web/static/assets/images/phoenix.png</span><br><span class="line">mv priv/static/robots.txt web/static/assets/robots.txt</span><br><span class="line">mv priv/static/js/app.js web/static/js/app.js</span><br><span class="line">mv priv/static/favicon.ico web/static/assets/favicon.ico</span><br><span class="line">touch web/static/css/app.css</span><br><span class="line">rm -rf priv/static/*</span><br></pre></td></tr></table></figure><h3 id="그냥-설치한-경우"><a href="#그냥-설치한-경우" class="headerlink" title="그냥 설치한 경우"></a>그냥 설치한 경우</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ mix phoenix.new with_brunch</span><br><span class="line">* creating with_brunch/config/config.exs</span><br><span class="line">* creating with_brunch/config/dev.exs</span><br><span class="line">* creating with_brunch/config/prod.exs</span><br><span class="line">* creating with_brunch/config/prod.secret.exs</span><br><span class="line">* creating with_brunch/config/test.exs</span><br><span class="line">* creating with_brunch/lib/with_brunch.ex</span><br><span class="line">* creating with_brunch/lib/with_brunch/endpoint.ex</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/views/error_view_test.exs</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/support/conn_case.ex</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/support/channel_case.ex</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/test_helper.exs</span><br><span class="line">* creating with_brunch/web/channels/user_socket.ex</span><br><span class="line">* creating with_brunch/web/router.ex</span><br><span class="line">* creating with_brunch/web/views/error_view.ex</span><br><span class="line">* creating with_brunch/web/web.ex</span><br><span class="line">* creating with_brunch/mix.exs</span><br><span class="line">* creating with_brunch/README.md</span><br><span class="line">* creating with_brunch/web/gettext.ex</span><br><span class="line">* creating with_brunch/priv/gettext/errors.pot</span><br><span class="line">* creating with_brunch/priv/gettext/en/LC_MESSAGES/errors.po</span><br><span class="line">* creating with_brunch/web/views/error_helpers.ex</span><br><span class="line">* creating with_brunch/lib/with_brunch/repo.ex</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/support/model_case.ex</span><br><span class="line">* creating with_brunch/priv/repo/seeds.exs</span><br><span class="line">* creating with_brunch/.gitignore</span><br><span class="line">* creating with_brunch/brunch-config.js</span><br><span class="line">* creating with_brunch/package.json</span><br><span class="line">* creating with_brunch/web/static/css/app.css</span><br><span class="line">* creating with_brunch/web/static/css/phoenix.css</span><br><span class="line">* creating with_brunch/web/static/js/app.js</span><br><span class="line">* creating with_brunch/web/static/js/socket.js</span><br><span class="line">* creating with_brunch/web/static/assets/robots.txt</span><br><span class="line">* creating with_brunch/web/static/assets/images/phoenix.png</span><br><span class="line">* creating with_brunch/web/static/assets/favicon.ico</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/controllers/page_controller_test.exs</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/views/layout_view_test.exs</span><br><span class="line">* creating with_brunch/<span class="built_in">test</span>/views/page_view_test.exs</span><br><span class="line">* creating with_brunch/web/controllers/page_controller.ex</span><br><span class="line">* creating with_brunch/web/templates/layout/app.html.eex</span><br><span class="line">* creating with_brunch/web/templates/page/index.html.eex</span><br><span class="line">* creating with_brunch/web/views/layout_view.ex</span><br><span class="line">* creating with_brunch/web/views/page_view.ex</span><br></pre></td></tr></table></figure><p>일단 필요없는 파일을 지운다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm brunch-config.js package.json</span><br><span class="line">rm web/static/css/phoenix.css web/static/js/socket.js</span><br></pre></td></tr></table></figure><h3 id="npm-webpack-설정"><a href="#npm-webpack-설정" class="headerlink" title="npm, webpack 설정"></a>npm, webpack 설정</h3><p>다음 명령을 실행하고 적당히 내용 입력하면 package.json 파일이 만들어진다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>webpack을 설치하고 설정 파일을 만든다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack babel-preset-es2015 copy-webpack-plugin \</span><br><span class="line">                       babel-loader babel-core \</span><br><span class="line">                       css-loader extract-text-webpack-plugin style-loader</span><br></pre></td></tr></table></figure><p>webpack.config.js파일은 이런 내용이 들어가면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">"./web/static/css/app.css"</span>,</span><br><span class="line">          <span class="string">"./web/static/js/app.js"</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">"./priv/static"</span>,</span><br><span class="line">    filename: <span class="string">"js/app.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      include: __dirname,</span><br><span class="line">      loader: [<span class="string">"babel"</span>],</span><br><span class="line">      query: &#123;</span><br><span class="line">        presets: [<span class="string">"es2015"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: ExtractTextPlugin.extract(<span class="string">"style"</span>, <span class="string">"css"</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/app.css"</span>),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: <span class="string">"./web/static/assets"</span> &#125;])</span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modulesDirectories: [ <span class="string">"node_modules"</span>, __dirname + <span class="string">"/web/static/js"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일단 정적파일의 복사, js, css의 생성까지만 다루는 단순한 설정이다.</p><p>package.json에 실행 옵션을 포함한 단축명령을 적는다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack --watch-stdin --progress --color",</span><br><span class="line">  "compile": "webpack -p"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>방금 생성한 명령을 watcher에 추가해 파일 수정이 있을때마다 실행 시킬 수 있다.</p><p>config/dev.exs에 넣어두자</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config <span class="symbol">:app_name</span>, AppName.Endpoint,</span><br><span class="line">  <span class="comment"># 다른 설정은 그대로 둘것</span></span><br><span class="line">  <span class="symbol">watchers:</span> [<span class="symbol">npm:</span> [<span class="string">"start"</span>]]</span><br></pre></td></tr></table></figure><h2 id="phoenix-자바스크립트들"><a href="#phoenix-자바스크립트들" class="headerlink" title="phoenix 자바스크립트들"></a>phoenix 자바스크립트들</h2><p>npm에 등록되어있으니 그냥 설치하면된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file:deps/phoenix_html file:deps/phoenix --save</span><br></pre></td></tr></table></figure><p>위에 패스도 잡아뒀으니, 이전처럼 import해서 사용할 수 있다.</p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><a href="http://matthewlehner.net/using-webpack-with-phoenix-and-elixir/" target="_blank" rel="noopener">http://matthewlehner.net/using-webpack-with-phoenix-and-elixir/</a><a href="http://mikker.github.io/2016/02/04/updated-phoenix-webpack-react-setup.html" target="_blank" rel="noopener">http://mikker.github.io/2016/02/04/updated-phoenix-webpack-react-setup.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; title=&quot;동기&quot;&gt;&lt;/a&gt;동기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;브런치보다 웹팩이 익숙하고 유지보수 잘되고 유저가 많다.&lt;/li&gt;
&lt;li&gt;이왕할거면 초기에 하는게 나중에 하는거보다</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vi-mode</title>
    <link href="http://marocchino.net/2016/09/23/vi-mode/"/>
    <id>http://marocchino.net/2016/09/23/vi-mode/</id>
    <published>2016-09-22T18:57:49.000Z</published>
    <updated>2021-01-11T23:08:13.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h1><p>RTFM</p><h1 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h1><p>처음에는 이맥스 단축키 외우기 귀찮고 빔이 더 편하지 않을까 정도로 쓰기시작했다만, 한 2년간 사용했는데도 인터프리터랄께 셸마다 미묘하게 동작이 틀리기도하고 아예 사용할 수 없는 경우도 있어서 그냥 이맥스 모드도 익숙해져버렸다.</p><p>익히고 까먹고 익히고 까먹고를 반복하고 있어서 정리할 겸..</p><h1 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h1><p>기본적으로는 <code>.inputrc</code>에 추가 하기만 하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> editing-mode vi</span><br></pre></td></tr></table></figure><p>다만, <code>fzf</code>를 사용한다면 <a href="https://github.com/junegunn/fzf/issues/39" target="_blank" rel="noopener">오동작</a>이생기니 <code>.bashrc</code>에서 로드하기 전에 한번 더 설정해줘야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -o vi</span><br><span class="line">[ -f ~/.fzf.bash ] &amp;&amp; <span class="built_in">source</span> ~/.fzf.bash</span><br></pre></td></tr></table></figure><p>이것만해도 사용하는데는 크게 문제 없는데, 가끔 지금 어떤 모드에 있는지 몰라서삽질할 때가 있으니 프롬프트에 현재 상태를 표시하게 해뒀다.<code>.inputrc</code>에 추가로..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> show-mode-in-prompt on</span><br><span class="line"><span class="built_in">set</span> vi-ins-mode-string \1\e[34;1m\2✚ \1\e[0m\2</span><br><span class="line"><span class="built_in">set</span> vi-cmd-mode-string \1\e[35;1m\2: \1\e[0m\2</span><br></pre></td></tr></table></figure><h1 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h1><p>전채 목록은 <a href="https://linux.die.net/man/3/readline" target="_blank" rel="noopener">readline</a>의 Default KeyBindings 항목을 읽어보면 된다. 이정도는 알아 둘만 한 것들만 뽑아봤다.</p><table><thead><tr><th>명령</th><th>이맥스</th><th>빔</th></tr></thead><tbody><tr><td>맨 앞으로 이동</td><td>ctrl-a</td><td>esc I</td></tr><tr><td>맨 뒤로 이동</td><td>ctrl-e</td><td>esc A</td></tr><tr><td>단어단위 앞으로 이동</td><td>ctrl-b</td><td>esc b</td></tr><tr><td>단어단위 뒤로 이동</td><td>ctrl-f</td><td>esc w</td></tr><tr><td>커서위치부터 뒤 삭제</td><td>ctrl-k</td><td>esc D</td></tr><tr><td>에디터에서 열기</td><td>ctrl-x ctrl-e</td><td>esc v</td></tr><tr><td>히스토리 검색</td><td>ctrl-r</td><td>ctrl-r</td></tr><tr><td>주석 처리</td><td>alt-#</td><td>esc I#</td></tr><tr><td>클리어</td><td>ctrl-l</td><td>esc ctrl-l</td></tr></tbody></table><h1 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h1><p>아까도 말했는데 몇몇 콘솔은 vi mode를 무시한다. 대표적으로<a href="http://stackoverflow.com/questions/11976765/erlang-interpreter-vi-mode" target="_blank" rel="noopener">Erlang</a>하고그 위에서 돌아가는 <a href="https://github.com/elixir-lang/elixir/issues/4533" target="_blank" rel="noopener">iex</a>가그렇다. 물론 래퍼로 감싸서 <a href="https://gist.github.com/jfreeze/8894279" target="_blank" rel="noopener">우회해서 사용</a>할수는 있지만, 리스크 관리는 알아서;</p><p>vi mode는 있는데 명령을 사용할 수 없는 경우도 있다. fish에서는 <code>esc v</code>가동작하지 않는다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://linux.die.net/man/3/readline" target="_blank" rel="noopener">https://linux.die.net/man/3/readline</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-ko.md" target="_blank" rel="noopener">https://github.com/jlevy/the-art-of-command-line/blob/master/README-ko.md</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tl-dr&quot;&gt;&lt;a href=&quot;#tl-dr&quot; class=&quot;headerlink&quot; title=&quot;tl;dr&quot;&gt;&lt;/a&gt;tl;dr&lt;/h1&gt;&lt;p&gt;RTFM&lt;/p&gt;
&lt;h1 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="bash" scheme="http://marocchino.net/tags/bash/"/>
    
    <category term="vim" scheme="http://marocchino.net/tags/vim/"/>
    
    <category term="shell" scheme="http://marocchino.net/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Elixir tips from exercism</title>
    <link href="http://marocchino.net/2016/09/20/elixir-tips-from-exercism/"/>
    <id>http://marocchino.net/2016/09/20/elixir-tips-from-exercism/</id>
    <published>2016-09-19T15:00:00.000Z</published>
    <updated>2021-01-11T23:08:13.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="재귀"><a href="#재귀" class="headerlink" title="재귀"></a>재귀</h1><p>다른 언어하다와서 성능이 안좋을거라는 선입견에 가능하면 안쓰려고 했는데 괜한걱정이었다. 오히려<a href="http://elixir-lang.org/docs/stable/elixir/Enum.html#flat_map/2" target="_blank" rel="noopener"><code>Enum</code></a>사용하는 쪽이 느릴 때가 많았다.</p><h1 id="for-문"><a href="#for-문" class="headerlink" title="for 문"></a>for 문</h1><p><a href="http://elixir-lang.org/docs/stable/elixir/Enum.html#flat_map/2" target="_blank" rel="noopener"><code>Enum.flat_map/2</code></a>대신 쓸 수 있다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span><br><span class="line">min..(max - <span class="number">2</span>)</span><br><span class="line">|&gt; Enum.flat_map(<span class="keyword">fn</span> x -&gt;</span><br><span class="line">  (x + <span class="number">1</span>)..(max - <span class="number">1</span>)</span><br><span class="line">  |&gt; Enum.flat_map(<span class="keyword">fn</span> y -&gt;</span><br><span class="line">    (y + <span class="number">1</span>)..max</span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> z -&gt;</span><br><span class="line">      [x, y, z]</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">|&gt; Enum.filter(&amp;pythagorean?<span class="regexp">/1)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># good</span></span><br><span class="line"><span class="regexp">for x &lt;- min..(max - 2),</span></span><br><span class="line"><span class="regexp">    y &lt;- (x + 1)..(max - 1),</span></span><br><span class="line"><span class="regexp">    z &lt;- (y + 1)..max,</span></span><br><span class="line"><span class="regexp">    pythagorean?([x, y, z]) do</span></span><br><span class="line"><span class="regexp">  [x, y, z]</span></span><br><span class="line"><span class="regexp">end</span></span><br></pre></td></tr></table></figure><h1 id="인자-개수"><a href="#인자-개수" class="headerlink" title="인자 개수"></a>인자 개수</h1><p>줄일 수 있으면 줄여라. 짧고 읽기도 편하다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upto</span></span>(0, acc), <span class="symbol">do:</span> acc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upto</span></span>(n, acc \\ []), <span class="symbol">do:</span> upto(n - <span class="number">1</span>, [n | acc])</span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upto</span></span>(0), <span class="symbol">do:</span> []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upto</span></span>(n), <span class="symbol">do:</span> [n | upto(n - <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>링크드 리스트는 배열과 다르다. 루비에서는 가능하면 배열을 적게 사용하려고노력했었는데 그럴 필요는 없다. 다만 zip한다던가 할게 아니면 튜플이 나을 때도있다.</p><h1 id="with"><a href="#with" class="headerlink" title="with"></a>with</h1><p>갓갓돋는다. BDD감각으로 읽힌다.</p><h1 id="amp-Shorthand"><a href="#amp-Shorthand" class="headerlink" title="&amp; Shorthand"></a>&amp; Shorthand</h1><p>&amp;로 함수 시작해서 인자 넘기는 패턴 밖에 몰랐는데, 인자도 생략할 수 있더라.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">~w(1 2 3)</span></span><br><span class="line">|&gt; Enum.map(&amp;String.to_integer(&amp;<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># equals to</span></span><br><span class="line"><span class="string">~w(1 2 3)</span></span><br><span class="line">|&gt; Enum.map(&amp;String.to_integer/<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="transpose"><a href="#transpose" class="headerlink" title="transpose"></a>transpose</h1><p>이게 왜없나 싶은데.. 만들 수는 있다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose</span></span>([[]|_]), <span class="symbol">do:</span> []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose</span></span>(list) <span class="keyword">do</span></span><br><span class="line">  [Enum.map(list, &amp;hd/<span class="number">1</span>) | transpose(Enum.map(list, &amp;tl/<span class="number">1</span>))]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose</span></span>(list) <span class="keyword">do</span></span><br><span class="line">  list |&gt; List.zip |&gt; Enum.map(&amp;Tuple.to_list/<span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="디스트럭쳐링"><a href="#디스트럭쳐링" class="headerlink" title="디스트럭쳐링"></a>디스트럭쳐링</h1><p>패턴 매칭이라 기본적으로 되는데 튜플은 개수 맞춰야하는 거만 좀 조심하면 된다.맵이 좀 적기 귀찮은데 신텍스 슈가 같은게 있으면 좋겠다. 있는데 나만 모르는 걸수도 있고..</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[a | _] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">&#123;a, b, c&#125; = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#123;a, _, _&#125; = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#123;a, _&#125; = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># error</span></span><br><span class="line"></span><br><span class="line">%&#123;<span class="symbol">a:</span> a, <span class="symbol">b:</span> b&#125; = %&#123;<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>&#125;</span><br><span class="line">%&#123;<span class="symbol">a:</span> a&#125; = %&#123;<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="state"><a href="#state" class="headerlink" title="state"></a>state</h1><p>루비에서는 간단하게 돼는데 할일이 많아졌다. 요런 코드가있다고 하자.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @number = <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">up</span></span></span><br><span class="line">    @number += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>이걸 엘릭서에서 하려면 이렇게 된다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Counter</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> GenServer</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle_call</span></span>(<span class="symbol">:up</span>, _from, state) <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="symbol">:reply</span>, state + <span class="number">1</span>, state + <span class="number">1</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="symbol">:ok</span>, pid&#125; = GenServer.start_link(Counter, 0)</span><br><span class="line">GenServer.call(pid, <span class="symbol">:up</span>)</span><br></pre></td></tr></table></figure><p>뭔가 더 단순하게 할 수있는 방법이 있었으면 좋겠다.</p><h1 id="그밖에"><a href="#그밖에" class="headerlink" title="그밖에"></a>그밖에</h1><p>가능하면 파이프써라.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span><br><span class="line">[h] ++ t</span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line">[h | t]</span><br></pre></td></tr></table></figure><p>까먹을 때가 가끔있는데 List.Chars.t는 Enum.t다.그냥 홀따옴표 표기로 적어도 Enum돌릴 수 있으니 길게 풀어쓸 필요는 없다.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bad</span></span><br><span class="line">?A <span class="keyword">in</span> [?A, ?B, ?C]</span><br><span class="line">[?A, ?B, ?C]</span><br><span class="line">|&gt; Enum.all?(&amp;(&amp;<span class="number">1</span> &lt; ?D))</span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line">?A <span class="keyword">in</span> <span class="string">'ABC'</span></span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line">|&gt; Enum.all?(&amp;(&amp;<span class="number">1</span> &lt; ?D))</span><br></pre></td></tr></table></figure><p><code>to_integer(float)</code>가 없다. 다들<a href="http://erlang.org/doc/man/erlang.html#round-1" target="_blank" rel="noopener"><code>round(Number)</code></a> 사용하는 듯하다.</p><p>스트링을 파이프로 넘겨야 할 때는<a href="http://elixir-lang.org/docs/stable/elixir/Regex.html#replace/4" target="_blank" rel="noopener"><code>Regex.replace/4</code></a>대신<a href="http://elixir-lang.org/docs/stable/elixir/String.html#replace/4" target="_blank" rel="noopener"><code>String.replace/4</code></a>쓰면 된다. 인자 순서만 다르고 기본적으로 같은 함수다.</p><h1 id="수정-이력"><a href="#수정-이력" class="headerlink" title="수정 이력"></a>수정 이력</h1><p>9월 23일: 오타 수정, 링크 추가9월 28일: 항목 추가</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;재귀&quot;&gt;&lt;a href=&quot;#재귀&quot; class=&quot;headerlink&quot; title=&quot;재귀&quot;&gt;&lt;/a&gt;재귀&lt;/h1&gt;&lt;p&gt;다른 언어하다와서 성능이 안좋을거라는 선입견에 가능하면 안쓰려고 했는데 괜한
걱정이었다. 오히려
&lt;a href=&quot;http://</summary>
      
    
    
    
    
    <category term="elixir" scheme="http://marocchino.net/tags/elixir/"/>
    
  </entry>
  
</feed>
